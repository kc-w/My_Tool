unit FromUnit1;//单元名称,程序的每个子模块称之为一个单元对应一个.pas文件

interface//interface部分
{*
关键字 Interface 至关键字 implementation 之间的部分称为 Interface 部分。
Interface部分可定义变量、常量、例程等。单元中并非仅有此处才可定义标识符，但只
有此部分中定义的标识符才可被其它文件访问。值得注意的是此部分定义的例程只需
留下一个原型即可，具体的实现由implementation部分完成。此部分可以书
写 uses 从句，其作用与.dpr 中相同。注意 uses 从句必须紧接于关键字 Interface 后，二
者之间不允许有任何代码
*}

//使用到的所有.pas 文件
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    btn1: TButton;
    procedure btn1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation//implementation部分
{*
此部分可书写上体代码，顺序上不必与声明时一致。实现时可省略参数，但若未省略则必
须与声明时完全一致。与interface部分类似，此部分可以定义常量、变量、例程等，但
只能在本单元内使用，本单元的 inteface 部分或其它单元无法使用此处定义的标识符。
当然也可以合用从句，但只能紧跟关键字 implementation 之后。
*}

{$R *.dfm}


{*
initialization 部分
关键字 initialization 至关键字 finalization 之间的部分。此部分可选。 此部分中
含有的代码在程序启动时运行，若多个单元中均含有，则按照工程文件 uses 从句中引用的
顺序来运行。此关键字也可直接用 begin 代替，不过如此一为，将无法指定单元的
finalization，在此种情形下，可以用 EXITPROC 变量来模拟（将要执行的代码封装为一个
过程然后将此过程赋予指针 ExitProc）。
finalization 部分
finalization 至.pas 文件的末尾。此部分可有可无，仅当 initialization 部分存在
时才可使用此部分。程序退出时运行此部分的代码，除非程序是由 Halt 例程强行退出。当
多个单元均存在此部分时，执行顺序与 initialization 相反。
*}


procedure TForm1.btn1Click(Sender: TObject);
begin
  ShowMessage('这是一个提示弹窗!');
end;

end.