1:最基础的方法，利用Windows API来创建


//原始CreateThread中如果发生异常，整个程序就默默地退出
function ThreadProc1(param: Pointer): Integer; stdcall;
begin
  showmessage('ThreadProc1执行');
  raise Exception.Create('抛出异常!');
end;

//BeginThread内部依然是调用的CreateThread。区别是BeginThread的回调函数没有stcall标记
//BeginThread创建的线程异常的话，会被默认的异常处理程序捕获，退出时有弹窗提示
function ThreadProc2(param: Pointer): Integer;
begin
  showmessage('ThreadProc2执行');
  raise Exception.Create('抛出异常!');
end;

//ResumeThread函数是恢复线程的运行,SuspendThread再次挂起线程,参数都是线程句柄, 返回值是执行前的挂起计数.
//SuspendThread 会给这个数 +1; ResumeThread 会给这个数 -1; 这个数最小是 0.
//当这个数 = 0 时, 线程会运行; > 0 时会挂起.
var
  threadId: TThreadID;
begin
  //返回值为线程退出码
  CreateThread(nil, 0, @ThreadProc1, nil, 0, threadId);
  BeginThread(nil, 0, @ThreadProc2, nil, 0, threadId);
end;


s1 是一个指向Windows SecurityAttributes记录(结构)的指针

s2 是在CreationFlags包含STACK_SIZE_IS_A_RESERVATION时为新线程保留的堆栈大小。否则，此参数将被忽略

s3 入口函数地址

s4 指向一个32位的参数，该参数未经解释传递给ThreadFunc

s5 选择线程状态
0 线程建立后立即执行入口函数
CREATE_SUSPENDED 线程建立后会挂起等待,在调用ResumeThread函数之前不会运行
STACK_SIZE_PARAM_IS_A_RESERVATION 指定线程的堆栈大小,如果不包含此标志,链接器将为新线程分配一个默认的堆栈大小

s6 返回新线程的唯一标识符。此ID出现在调试器的线程状态框中

//GetCurrentThreadId、MainThreadID、MainInstance可以用来获取主线程id
----------------------------------------------------------------------------------------

2:TThread类

type
  TMyThread = class(TThread)
  protected
    procedure Execute; override;
  end;
 
procedure TMyThread.Execute; 
var 
  i: Integer; 
begin 
  FreeOnTerminate := True; {这可以让线程执行完毕后随即释放} 
  for i := 0 to 500000 do 
  begin 
    Form1.Canvas.Lock; 
    Form1.Canvas.TextOut(10, 10, IntToStr(i)); 
    Form1.Canvas.Unlock; 
  end; 
end;
 
var
  MyThread: TMyThread;
begin
  TMyThread.Create(True);  // True表示挂起线程，暂不启动。默认为False
  MyThread.Start;  // 启动线程
end;

//创建匿名线程
TThread.CreateAnonymousThread(
  procedure
  begin
    OutputdebugString('匿名线程');
  end).Start;

--------------------------------------------------------------------------------------

3:线程池

//TThreadPool.Default返回一个默认的线程池，QueueWorkItem添加一个任务请求,如果线程池的工作线程到达上限的话是需要等待的
procedure TForm1.Button1Click(Sender: TObject);
begin
  TThreadPool.Default.QueueWorkItem(
    procedure
    begin
      OutputdebugString(PChar(Format('当前线程：%d', [GetCurrentThreadId])));
    end);
end;

-------------------------------------------------------------------------------------------

4:Task
//Task本质上也是使用的线程池，但是提供了比ThreadPool更丰富的功能，Task是可控的

//创建一个task
var
  task: ITask;
begin
  task := TTask.Create(
    procedure
    begin
      OutputdebugString('11111');
      Sleep(2000);
    end);
  task.Start;
  task.Wait;  // 等待任务结束
  OutputdebugString('22222');
end;


//使用静态方法Run立即启动一个Task
var
  task: ITask;
begin
  task := TTask.Run(
    procedure
    begin
      OutputdebugString('11111');
      Sleep(2000);
    end);
  task.Wait;  // 等待任务结束
  OutputdebugString('22222');
end;


//创建task任务组
var
  tasks: array of ITask;
begin
  SetLength(tasks, 3);
  tasks[0] := TTask.Run(
    procedure
    begin
      OutputdebugString('task 1');
      Sleep(2000);
    end);
  tasks[1] := TTask.Run(
    procedure
    begin
      OutputdebugString('task 2');
      Sleep(2000);
    end);
  tasks[2] := TTask.Run(
    procedure
    begin
      OutputdebugString('task 3');
      Sleep(2000);
    end);
 
  TTask.WaitForAll(tasks);
  OutputdebugString('22222');
end;




var
  task: ITask;
  f: IFuture<Integer>;
  n: Integer;
begin
  f := TTask.Future<Integer>(
    function: Integer
    begin
      Sleep(1000);
      Result := 5;
    end);
 
  n := f.Value;  // 阻塞，等到任务执行完毕
end;

