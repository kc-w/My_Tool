program ConsoleDemo1;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils;


//全局变量可以在声明时并赋值,使用'='直接赋值
//局部变量则需要在begin之前先声明变量再在内部赋值,使用':='赋值

var Num1:  Integer=20;
var Num2:  Integer=3;
var Name: String='小黑';
var bool1:  Boolean=True;
var bool2:  Boolean=False;
var Str1:  String='hhhhhh';


//定义符号常量
Const
    CONS_A = 1000;
    CONS_B = CONS_A+345;
    CONS_C=CONS_A+CONS_B+10000;


//类型常量,常量值中不能含有其它常量
Const
  Name：String = 'delphi2010';
  Digits1: array[0..9] of Char = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9');
  Digits2: array[0..9] of Char = '0123456789';


//字符串型常量
//这种声明的字符串用于程序中时将被编译至资源文件中,好处是可以修改字符串而不需要重载编译程序。
resourcestring
    str = 'The Current Edition Is Delphi2010';


//数组型常量,自定义一个数据类型
type
  TCube = array[0..1, 0..1, 0..1] of Integer;//定义数组维度
Const
  Maze: TCube = (((0,1),(2,3)),((4,5),(6,7)));//数组各个维度赋值


//指针常量,i的值可随时改变，但指针pi只能指向i，不能再指向其它变量。
var i: integer=110;
const
  pi: ^integer = @i;


//自定义数组类型
Type
  MyArray = Array [5..9] of integer;//定义一个下标从5开始,到9结束的数组类型
//初始化一个自定义数组类型
var A1: MyArray;

//创建一个长度为5的静态数组;
var A2: Array [0..4] of integer;

////动态数组,赋值前需要设置数组长度及维度:SetLength(A3,4,2);
var A3: Array of Array of integer;


//变体记录
type
  TRec = record
    s:string;
  case Integer of
    //1和2共享内存区
    //如果给f1,f2,f3都赋值的话则f3将覆盖掉整个内存(8个长度)
    //输出f1或f2时将只截取对应部分,并转换为相应数据类型
    1:(f1:integer;f2:String[4]);
    2:(f3:string[8]);
  end;


//共址变量,赋值其中一个变量,与另一个变量共享
var str1: String;
	leng2: String absolute str; 


//枚举类型只能是标识符,两个枚举类型不能出现相同元素,只能进行赋值运算和关系运算,不能进行算术运算和逻辑运算,不能用下标访问
type
  days=(sun,mon,tue,wed,thu,fri,sat);
  colors=(red,yellow,blue,white,black,green);
var
  weekday:days;
  color:colors;


//只有有序的类型才能跟关键字set of,如有限个数字,字符,枚举,且不能用下标访问
type
  Set1 = set of char;//set1 的成员为 byte 型，值域为 0 至 255 共 255 个整 型值
  Set2 = set of 1..9;//set2 的成员为子界类型，值域为 1 至 9 共 9 个整型值
  Set3 = set of (red,green,blue);//set3 的成员类型为枚举类型，值域为 3 个标识符
var
    CharSet : Set1;


begin
  try
  
  //关于集合的运算,集合关系运算符: =相等,<>不相等,>=包含，表示左边包含右边
  Include(CharSet, 'a');//在集合中增加元素'a'
  CharSet := CharSet+['b'];//在集合中增加元素'b'
  Exclude(CharSet, 'x');//在集合中删除元素'x'
  CharSet := CharSet-['y', 'z'];//在集合中删除元素'y'， 'z'
  CharSet := CharSet*['y', 'z'];//两个集合的交集

 
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.