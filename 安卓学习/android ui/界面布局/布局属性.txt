Android中有六大布局:
LinearLayout(线性布局)
RelativeLayout(相对布局)
TableLayout(表格布局)
FrameLayout(帧布局)
AbsoluteLayout(绝对布局)
GridLayout(网格布局)

当android:orientation="vertical"时,只有水平方向的设置才起作用,垂直方向的设置不起作用.
即:left,right,center_horizontal是生效的。
当android:orientation="horizontal"时,只有垂直方向的设置才起作用,水平方向的设置不起作用.
即:top,bottom,center_vertical是生效的。


LinearLayout(线性布局)
	常用属性:
		orientation:布局中组件的排列方式,有horizontal(水平),vertical(竖直,默认)两种
		gravity:控制组件所包含的子元素的对齐方式,可多个组合,如(left|buttom...)
		layout_gravity:控制该组件在父容器里的对齐方式
		layout_width:布局的宽度,通常不直接写数字,用wrap_content(组件实际大小),
			fill_parent或者match_parent填满父容器
		layout_height:布局的高度,参数同上
		id:为该组件设置一个资源id,在java文件中可以通过findViewById(id)找到该组件
		background:为该组件设置一个背景图片,或者直接用颜色覆盖
	权重:
		layout_weight:该属性是用来等比例地划分区域
	分割线:
		divider:该属性用于为LinearLayout设置分割线图片,
			通过showDividers来设置分割线的所在位置,有四个可选值none,middle,begining,end
			
			
RelativeLayout(相对布局)
	基本属性:
		gravity:同上
		ignoreGravity:设置该属性为true时,将不受gravity属性的影响
	根据父容器定位:
		layout_alighParentLeft:左对齐
		layout_alignParentRight:右对齐
		layout_alighParentTop:顶部对齐
		layout_alighParentBottom:底部对齐
		layout_centerHorizontal:水平居中
		layout_centerVertical:垂直居中
		layout_centerInParent:中间位置
	根据兄弟组件定位:
		layout_toLeftOf:参考组件的左边
		layout_toRightOf:参考组件的右边
		layout_above:参考组件的上方
		layout_below:参考组件的下方
		layout_alignTop:对齐参考组件的上边界
		layout_alignBottom:对齐参考组件的下边界
		layout_alignLeft:对齐参考组件的左边界
		layout_alignRight:对齐参考组件的右边界
	margin(外边距):
		layout_margin:设置组件上下左右的偏移量
		layout_marginLeft:设置组件左边的偏移量
		layout_marginRight:设置组件右边的偏移量
		layout_marginTop:设置组件上面的偏移量
		layout_marginButtom:设置组件下面的偏移量
	padding(内边距):
		padding:向内部元素的上下左右填充一定边距
		paddingLeft:左边距
		paddingRight:右边距
		paddingTop:上边距
		paddingBottom:下边距





将<style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">添加到style.xml文件中即可去除顶部项目名显示

在onCreate方法中，super.onCreate(savedInstanceState);后添加
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);设定为竖屏
setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);设定为横屏

导航栏实现:
    导航栏通常由Fragment类实现View.OnClickListener接口来完成,通过重写onClick方法监听点击进行fragment页面之间的切换








		
		
	









