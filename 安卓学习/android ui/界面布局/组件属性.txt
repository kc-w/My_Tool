通用控件属性android:id:                设置一个组件id,根据id,可以在Java代码中通过findViewById()的方法获取到该对象android:layout_width:      组件的宽度，一般写:wrap_content或者match_parent(fill_parent)，android:layout_height:     组件的高度android:layout_weight:     按比例划分空间android:gravity:           设置控件里文本和图片的对齐方式android:layout_gravity:    设置这个控件所处的容器里的位置android:text:              设置显示的文本内容，一般我们是把字符串写到string.xml文件中,然后通过@String/xxx取得对应的字符串内容android:textColor:         设置字体颜色,同上，通过colors.xml资源来引用android:textStyle:         设置字体风格，三个可选值:normal(无效果)，bold(加粗)，italic(斜体)android:textSize:          字体大小android:background:        控件的背景,drawable资源文件,会根据给定的宽度来进行拉伸android:autoLink:          识别链接类型,比如一串号码，点击后跳转至拨号界面！android:lines:             不管多大都显示设置行数(ellipsize="end"省略后面的字符,以...代替)android:minLines:          能够输入的最小行数(与inputType同用时可能会失效)android:maxLines:          能够输入的最大行数(与inputType同用时可能会失效)android:margin:            (Top,Left,Right,Button)组件和组件的距离android:padding:           (Top,Left,Right,Button)组件内文字和组件边框的距离android:drawableTop:       在text的正上方输出一个drawable，如图片android:drawableLeft:      在text的正左边输出一个drawable，如图片android:drawableRight:     在text的正右边输出一个drawable，如图片android:drawableBottom:    在text的正下方输出一个drawable，如图片android:drawablePadding    在text的正上方输出一个drawable，如图片android:layout_centerHorizontal            水平居中android:layout_centerVertical              垂直居中android:layout_centerInParent              相对于父元素完全居中android:layout_alignParentBottom           贴紧父元素的下边缘android:layout_alignParentLeft             贴紧父元素的左边缘android:layout_alignParentRight            贴紧父元素的右边缘android:layout_alignParentTop              贴紧父元素的上边缘android:layout_alignWithParentlfMissing    如果找不到对应的兄弟元素找不到，就以父元素做参照物。android:layout_below          在某元素的下方android:layout_above          在某元素的上方android:layout_toLeftOf       在某元素的左边Android:layout_toRightOf      在某元素的右边android:layout_alignTop       本元素的上边缘和某元素的上边缘对齐android:layout_alignLeft      本元素的左边缘和某元素的左边缘对齐android:layout_alignBottom    本元素的下边缘和某元素下边缘对齐android:layout_alignRight     本元素的右边缘和某元素右边缘对齐visibility               设置控制控件的显示和隐藏(visible可见,invisible不可见,gone隐藏)shadowColor:             设置阴影颜色,需要与shadowRadius一起使用shadowRadius:            设置阴影的模糊程度,设为0.1就变成字体颜色了,建议使用3.0shadowDx:                设置阴影在水平方向的偏移,就是水平方向阴影开始的横坐标位置shadowDy:                设置阴影在竖直方向的偏移,就是竖直方向阴影开始的纵坐标位置TextView:文本控件属性textColorHint               默认提示文本颜色selectAllOnFocus:           如果设置该属性为true则点击后默认选中所有内容inputType:                  限制输入类型hint:                       默认提示文本singleLine:                 true或者false,如果设置为true为单行输入ImageView:图片控件属性src:引用的资源,使用src填入图片时,是按照图片大小直接填充,并不会进行拉伸ProgressBar:进度条控件属性max="100"                                            设置进度条最大值min="1"                                              设置进度条最小值progress:                                            设置当前进度style="?android:attr/progressBarStyleHorizontal"     将旋转进度条变为条状进度条AlertDialog:对话框属性title               设置对话框标题message             设置对话框提示内容Cancelable          设置是否允许点击空白处取消弹窗在类中创建一个简易对话框    AlertDialog.Builder dialog = new AlertDialog.Builder (MainActivity.this);    dialog.setTitle("提示框标题");    dialog.setMessage("提示框内容!!!!!!!!!!!!!!!!!!!!!!!!");    dialog.setCancelable(false);    dialog.setPositiveButton("确认", new DialogInterface.OnClickListener() {        public void onClick(DialogInterface dialog, int which) {        }    });    dialog.setNegativeButton("取消", new DialogInterface.OnClickListener(){        public void onClick(DialogInterface dialog,int which) {        }    });    dialog.show();ProgressDialog:进度条对话框属性在类中创建一个简易进度条对话框    ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);    progressDialog.setTitle("完成进度条");    progressDialog.setMessage("Loading・・・");    progressDialog.setCancelable(false);    progressDialog.show();如果在setCancelable()中传入了false,表示ProgressDialog是不能通过Back键取消掉的，这时要在代码中做好控制,数据加载完成后必须要调用ProgressDialog的dismiss()方法来关闭对话框，否则ProgressDialog将会一直存在。			