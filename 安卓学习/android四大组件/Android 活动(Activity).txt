Android 系统初始化它的程序是通过活动中的 onCreate() 回调的调用开始的。存在有一序列的回调方法来启动一个活动，同时有一序列的方法来关闭活动。
Activity 类定义了下面的回调:
    onCreate()	这是第一个回调，在活动第一次创建时调用
    onStart()	活动即将可见时调用
    onResume()	活动可见时调用
    onPause()	暂停,其他活动获得焦点时调用
    onStop()	离开当前活动时调用
    onDestroy()	活动被系统销毁之前调用
    onRestart()	重新返回停止活动调用
    onSaveInstanceState(Bundle save)活动暂停时调用

    finish()销毁当前的activity
    getTaskId()得到当前活动返回栈的id



Activity 是与用户交互的入口点。它表示拥有界面的单个屏幕。
尽管这些 Activity 通过协作在电子邮件应用中形成一种紧密结合的用户体验，但每个 Activity 都独立于其他 Activity 而存在。
因此，其他应用可以启动其中任何一个 Activity（如果应用允许）。
Activity 有助于完成系统和应用程序之间的以下重要交互：
    追踪用户当前关心的内容（屏幕上显示的内容），以确保系统继续运行托管 Activity 的进程。
    了解先前使用的进程包含用户可能返回的内容（已停止的 Activity），从而更优先保留这些进程。
    帮助应用处理终止其进程的情况，以便用户可以返回已恢复其先前状态的 Activity。
    提供一种途径，让应用实现彼此之间的用户流，并让系统协调这些用户流。（此处最经典的示例是共享。）

活动的启动模式:

活动的启动模式一共有4种,分别是 standard,singleTop,singleTask和singleInstance,
可以在 AndroidManifest.xml中通过给<activity>标签指定 android: launchMode属性来选择启动模式。
<activity
    android:name=".FirstActivity"
    android:launchMode="singleTop"
    android:label="This is FirstActivity">
    <intent-filter>
        <action android:name"android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
    </intent-filter>
</activity>




standard:
活动默认的启动模式,在不进行显式指定的情况下(AndroidManifest.xml中声明),
所有活动都会自动使用这种启动模式。
因此,到目前为止我们写过的所有活动都是使用的 standard模式。经过上一节的学习,
你已经知道了 Android是使用返回栈来管理活动的,在 standard模式(即默认情况)下,每当启
动一个新的活动,它就会在返回栈中入栈,并处于栈顶的位置。对于使用 standard模式的活动
系统不会在乎这个活动是否已经在返回栈中存在,每次启动都会创建该活动的一个新的实例。

singleTop:
在有些情况下，你会觉得standard模式不太合理。活动明明已经在栈顶了，为什么再次
启动的时候还要创建一个新的活动实例呢？别着急，这只是系统默认的一种启动模式而已，你完
全可以根据自己的需要进行修改，比如说使用singleTop模式。当活动的启动模式指定为
singleTop,在启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再
创建新的活动实例,不过当该活动并未处于栈顶位置时，这时再启动该活动,还是会创建新的实例的。

singleTask:
使用singleTop模式可以很好地解决重复创建栈顶活动的问题，但是正如你在上一节所看到
的，如果该活动并没有处于栈顶的位置，还是可能会创建多个活动实例的。那么有没有什么办法
可以让某个活动在整个应用程序的上下文中只存在一个实例呢？这就要借助singleTask模式来实
现了。当活动的启动模式指定为singleTask,每次启动该活动时系统首先会在返回栈中检查是否
存在该活动的实例，如果发现已经存在则直接使用该实例，并把在这个活动之上的所有活动统统
出栈，如果没有发现就会创建一个新的活动实例。

singlelnstance:
singlelnstance模式应该算是4种启动模式中最特殊也最复杂的一个了，你也需要多花点功夫
来理解这个模式。不同于以上3种启动模式，指定为singlelnstance模式的活动会启用一个新的返
回栈来管理这个活动(其实如果singleTask模式指定了不同的taskAffinity,也会启动一个新的返
回栈)。那么这样做有什么意义呢？想象以下场景，假设我们的程序中有一个活动是允许其他程
序调用的，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，应该如何实现呢？
使用前面3种启动模式肯定是做不到的，因为每个应用程序都会有自己的返回栈，同一个活动在
不同的返回栈中入栈时必然是创建了新的实例。而使用singlelnstance模式就可以解决这个问题,
在这种模式下会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都
共用的同一个返回栈，也就解决了共享活动实例的问题。

活动的实践应用:

一:这个技巧将教会你如何根据程序当前的界面就能判断出这是哪一个活动。

1:新建一个BaseActivity类
注意这里BaseActivity和普通活动的创建方式并不一样，因为我们不需要让
BaseActivity在AndroidManifest.xml中注册，所以选择创建一个普通的Java类就可以了。然后
让 BaseActivity 继承自 AppCompatActivity,并重写 onCreate()方法，如下所示
    public class BaseActivity extends AppCompatActivity {
        ©Override
        protected void onCreate(Bundie savedlnstanceState) {
            super.onCreate(savedInstanceState);
            //打印当前的活动活动名
            Log.d("BaseActivity", getClass().getSimpleName());
            //将新创建的活动加入到栈中进行管理
            ActivityCollector.addActivity(this):

        }

        ©Override
        protected void onDestroyO {
            super.onDestroy();
            //清除活动
            ActivityCollector.removeActivity(this);
        }
    }

2:把项目中所有活动不再继承自AppCompatActivity,而是继承自BaseActivity类
项目中所有活动的现有功能并不受影响，它们仍然完全继承了 Activity中的所有特性
现在每当进入到一个活动的界面,该活动的类名就会被打印出来,这样就知晓当前界面对应的是哪一个活动了。


二:随时随地退出程序
1:如果你的活动栈中有多个活动,你会发现当前想退出程序需要连按多次Back键才行,按Home键只是把程序挂起，
并没有退出程序,解决办法就是需要用一个专门的集合类对所有的活动进行管理,然后只需要点击按钮就可以退出
应用
public class Activitycollector {
    public static List<Activity> activities = new ArrayList<>();
    //向栈中添加活动
    public static void addActivity(Activity activity) {
        activities.add(activity);
    }
    //删除指定活动
    public static void removeActivity(Activity activity) {
        activities.remove(activity);
    }
    //删除所有活动,退出程序
    public static void finishAll() {
        for (Activity activity : activities) {
            if (!activity.isFinishing()) {
                activity.finish();
            }
        }
    }
}

2:还可以在销毁所有活动的代码后面再加上杀掉当前进程的代码,以保证程序完全退出,代码如下所示:
android.os.Process.killProcess(android.os.Process.myPid());

3:通过myPid()方法来获得当前程序的进程id,killProcess()方法只能用于杀掉当前程序的进程


三:启动活动的最佳写法
启动活动的方法相信你已经非常熟悉了,首先通过Intent构建出当前的“意图”,然后调用
startActivity()或startActivityForResult()方法将活动启动起来,如果有数据需要从一
个活动传递到另一个活动,也可以借助Intent来完成。

假设SecondActivity中需要用到两个非常重要的字符串参数，在启动SecondActivity的时候
必须要传递过来，那么我们很容易会写出如下代码：
    Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
    intent.putExtra("paraml", "datal");
    intent putExtra("param2", "data2");
    startActivity(intent);

这样写是完全正确的，不管是从语法上还是规范上，只是在真正的项目开发中经常会有对接
的问题出现。比如SecondActivity并不是由你开发的，但现在你负责的部分需要有启动
SecondActivity这个功能，而你却不清楚启动这个活动需要传递哪些数据。这时无非就有两种办
法，一个是你自己去阅读SecondActivity中的代码，二是询问负责编写SecondActivity的同事。
你会不会觉得很麻烦呢？其实只需要换一种写法，就可以轻松解决掉上面的窘境。

    public static void actionstart(Context context, String datal, String data2) {
        Intent intent = new Intent(context, SecondActivity.class);
        intent.putExtra("paraml", datal);
        intent.putExtra("param2", data2);
        context.startActivity(intent);
    }


