应用程序组件是一个Android应用程序的基本构建块。这些组件由应用清单文件松耦合的组织。
AndroidManifest.xml描述了应用程序的每个组件，以及他们如何交互。
确定应用需要的任何用户权限，如互联网访问权限或对用户联系人的读取权限。
根据应用使用的 API，声明应用所需的最低 API 级别。
声明应用使用或需要的硬件和软件功能，如相机、蓝牙服务或多点触摸屏幕。
声明应用需要链接的 API 库（Android 框架 API 除外），如 Google 地图库。

以下是可以在Android应用程序中使用的四个主要组件。

AndroidManifest.xml描述了应用程序的每个组件，以及他们如何交互。

Activities	描述UI，并且处理用户与机器屏幕的交互。
Services	处理与应用程序关联的后台操作。
Broadcast Receivers	处理Android操作系统和应用程序之间的通信。
Content Providers	处理数据和数据库管理方面的问题。

Activities:
一个活动标识一个具有用户界面的单一屏幕。举个例子，一个邮件应用程序可以包含一个活动用于显示新邮件列表，另一个活动用来编写邮件，再一个活动来阅读邮件。
当应用程序拥有多于一个活动，其中的一个会被标记为当应用程序启动的时候显示。
一个活动是Activity类的一个子类:
public class MainActivity extends AppCompatActivity {

}

Services:
服务是运行在后台，执行长时间操作的组件。举个例子，服务可以是用户在使用不同的程序时在后台播放音乐，或者在活动中通过网络获取数据但不阻塞用户交互。
一个服务是Service类的子类:
public class MyService extends Service {

}

Broadcast Receivers:
广播接收器简单地响应从其他应用程序或者系统发来的广播消息。
举个例子，应用程序可以发起广播来让其他应用程序知道一些数据已经被下载到设备，并且可以供他们使用。因此广播接收器会拦截这些通信并采取适当的行动。
广播接收器是BroadcastReceiver类的一个子类，每个消息以Intent对象的形式来广播:
public class MyReceiver  extends  BroadcastReceiver {

}

Content Providers:
内容提供者组件通过请求从一个应用程序到另一个应用程序提供数据。
这些请求由ContentResolver类的方法来处理。这些数据可以是存储在文件系统、数据库或者其他其他地方。
内容提供者是ContentProvider类的子类，并实现一套标准的API，以便其他应用程序来执行事务:
public class MyContentProvider extends  ContentProvider {

}

Fragments	代表活动中的一个行为或者一部分用户界面。
Views	绘制在屏幕上的UI元素，包括按钮，列表等。
Layouts	控制屏幕格式，展示视图外观的View的继承。
Intents	组件间的消息连线。
Resources	外部元素，例如字符串资源、常量资源及图片资源等。
Manifest	应用程序的配置文件。


在四种组件类型中，有三种（Activity、服务和广播接收器）均通过异步消息 Intent 进行启动。
Intent 是一个消息传递对象，您可以用来从其他应用组件请求操作。

启动 Activity
    Activity 表示应用中的一个屏幕。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。
    Intent 用于描述要启动的 Activity，并携带任何必要的数据。

