首先，要在新建项目中的AndroidManifest.xml中声明两个权限：BLUETOOTH权限和BLUETOOTH_ADMIN权限。


<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.BLUETOOTH"/><!--请求连接和传送数据-->
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/><!--启动设备、发现或进行蓝牙设置-->
<uses-permission-sdk-23 android:name="android.permission.ACCESS_COARSE_LOCATION"/>



在Activity中，添加


要想获得搜索到的结果，就需要注册广播

public ArrayAdapter adapter;
ListView listView = (ListView) findViewById(R.id.list);//控件 列表
//定义一个列表，存蓝牙设备的地址。
public ArrayList<String> arrayAddr=new ArrayList<>();
//定义一个列表，存蓝牙设备地址，用于显示。
public ArrayList<String> deviceName=new ArrayList<>();
//定义适配器
adapter = new ArrayAdapter(this, android.R.layout.simple_expandable_list_item_1, deviceName);
//给列表添加适配器
listView.setAdapter(adapter);



public void applypermission() {
    if (Build.VERSION.SDK_INT >= 23) {
        //检查是否已经给了权限
        int checkpermission = ContextCompat.checkSelfPermission(getApplicationContext(),
                Manifest.permission.ACCESS_FINE_LOCATION);
        //没有给权限
        if (checkpermission != PackageManager.PERMISSION_GRANTED) {
            Log.e("permission", "动态申请");
            //参数分别是当前活动，权限字符串数组，requestcode
            ActivityCompat.requestPermissions(WiFiMainActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
        }
    }
}

@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        Toast.makeText(WiFiMainActivity.this, "已授权", Toast.LENGTH_SHORT).show();
    } else {
        Toast.makeText(WiFiMainActivity.this, "拒绝授权", Toast.LENGTH_SHORT).show();
    }
}






private void startScan() {
    //SCAN_INTERVEL = 5000 毫秒后停止扫描
    postDelayed(new Runnable() {
        @Override
        public void run() {
            bluetoothAdapter.stopLeScan(leScanCallback);
        }
    }, SCAN_INTERVEL);
    //开始扫描
    bluetoothAdapter.startLeScan(leScanCallback);
}

final BluetoothAdapter.LeScanCallback leScanCallback = new BluetoothAdapter.LeScanCallback() {
    @Override
    public void onLeScan(BluetoothDevice bluetoothDevice, int i, byte[] bytes) {
        //这里当扫描到的设备，设备名不为null，就通过logi输出设备名和MAC地址。
        //这里也可以添加其他筛选条件，如特定设备名、或设备列表中是否已有。
        if(bluetoothDevice.getName() != null) {
            //这里可以将设备添加到列表中，并通过ListView显示出来
            Log.i(TAG, "onLeScan: " + bluetoothDevice.getName() + " : " + bluetoothDevice.getAddress());

            deviceName.add("设备名："+device.getName()+"\n" +"设备地址："+device.getAddress() + "\n");//将搜索到的蓝牙名称和地址添加到列表。
            arrayAddr.add( device.getAddress());//将搜索到的蓝牙地址添加到列表。
            adapter.notifyDataSetChanged();//更新

        }
    }
};



//MACADDR 为要连接的设备MAC地址，可以通过设备的getAddress()方法获取
BluetoothDevice bluetoothDevice = bluetoothAdapter.getRemoteDevice(MACADDR);
BluetoothGatt bluetoothGatt;
if(bluetoothDevice != null){
    bluetoothGatt = bluetoothDevice.connectGatt(context,true,gattCallback);
}else{
    Toast.makeText(WiFiMainActivity.this, "没有该设备!", Toast.LENGTH_SHORT).show();
}


BluetoothGattCallback gattCallback = new BluetoothGattCallback() {
    //连接状态发生改变时调用
    @Override
    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
        if(status == BluetoothGatt.GATT_SUCCESS) {
            if (newState == BluetoothProfile.STATE_CONNECTED) {
                //建立连接
            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
                //连接断开
            }
        }else{

            BleLog.e(TAG, "连接状态异常->" + GattError.parseConnectionError(status));
            disconnectInternal(false);
            onConnectError(status);

        }


    }

    //发现服务
    @Override
    public void onServicesDiscovered(BluetoothGatt gatt, int status) {
        if (status == BluetoothGatt.GATT_SUCCESS) {
        //这里可以通过发送广播，接收到相应广播后，对服务做相应处理。
        LogTool.i(TAG, "onServicesDiscovered:status:" + status);
      } else {
        LogTool.w(TAG, "onServicesDiscovered received: " + status);
        System.out.println("onServicesDiscovered received: " + status);
      }
    }

    @Override
    public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
       //读取到值，在这里读数据
      if (status == BluetoothGatt.GATT_SUCCESS) {
        //数据处理
      }
    }

    @Override
    public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
        switch(status) {
        case BluetoothGatt.GATT_SUCCESS:
            LogTool.i(TAG, "write data success");
            break;
        case BluetoothGatt.GATT_FAILURE:
            LogTool.i(TAG, "write again");
            gatt.writeCharacteristic(characteristic);
            break;
        case BluetoothGatt.GATT_WRITE_NOT_PERMITTED:
            LogTool.i(TAG, "write not permitted");
            break;
    }

    super.onCharacteristicWrite(gatt,characteristic,status);
    }

    @Override
    public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
        super.onCharacteristicChanged(gatt, characteristic);
    }
};




//服务和特征值获取
BluetoothGattService bluetoothGattService;
BluetoothGattCharacteristic characteristicRead;
BluetoothGattCharacteristic characteristicWrite;
//获取服务
bluetoothGattService = bluetoothGatt.getService(UUID.fromString("0000ffe0-0000-1000-8000-00805f9b34fb"));
//获取读特征值
characteristicRead = bluetoothGattService.getCharacteristic(UUID.fromString("0000ffe7-0000-1000-8000-00805f9b34fb"));
//获取写特征值
characteristicWrite = bluetoothGattService.getCharacteristic(UUID.fromString("0000ffe6-0000-1000-8000-00805f9b34fb"));
//使能接收数据通知
List<BluetoothGattDescriptor> descriptors = characteristicRead.getDescriptors();
for (BluetoothGattDescriptor bgp : descriptors) {
    LogTool.i(TAG, "setCharacteristicNotification: " + bgp);
    bgp.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
    bluetoothGatt.writeDescriptor(bgp);
}


//接收数据
//这里例子里读特征值的UUID为0000ffe7-0000-1000-8000-00805f9b34fb，在实际应用中视实际情况而定。
if ( characteristic.getUuid().toString().equals("0000ffe7-0000-1000-8000-00805f9b34fb")){
    // For all other profiles, writes the data formatted in HEX.对于所有的文件，写入十六进制格式的文件
    //这里读取到数据，读取的数据为byte数组
    final byte[] data = characteristic.getValue();
    LogTool.i(TAG, "broadcastUpdate: data length = " + data.length)；
}


//发送数据
//为写特征值设置要发送的数据，datas为byte数组
characteristicWrite.setValue(datas)；
//gatt发送数据
bluetoothGatt.writeCharacteristic(characteristicWrite);



配对蓝牙设备

1.作为客户端连接

首先要获取远程设备BluetoothDevice的对象，然后使用该BluetoothDevice的对象来获取一个BluetoothSocket对象,BluetoothSocket对象调用connect()可以建立连接。
蓝牙连接整个过程需要在子线程中执行的,并且要将 scoket.connect()放在一个新的子线程中,因为如果将这个方法也放在同一个子线程中解决的话,就会永远报错read failed, socket might closed or timeout, read ret: -1；

//定义列表Item的点击事件
listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        device = adapter.getRemoteDevice(arrayList.get(i));
        mge = editText.getText().toString() + "\r\n";//获得编辑文本框里的文字
        clientThread = new ClientThread(device, mge, context);
        clientThread.start();
    }


});

//代码中的device需要把注册广播时的device作为参数传进线程中

class ClientThread extends Thread {
    public void run() {
        final BluetoothSocket socket = (BluetoothSocket) device.getClass().getDeclaredMethod("createRfcommSocket", new Class[]{int.class}).invoke(device, 1);

        socketThread = new SocketThread(socket);
        socketThread.start();

    }
}
class SocketThread extends Thread {
    public void run() {

        //在连接蓝牙之前，还要先取消蓝牙设备的扫描，否则容易连接失败。
        adapter.cancelDiscovery();//adapter为获取到的蓝牙适配器
        socket.connect();//连接
    }
}



2.作为服务端连接

服务端接收连接需要使用BluetoothServerSocket类，它的作用是监听进来的连接，在一个连接被接收之后，会返回一个BluetoothSocket对象，
这个对象可以用来和客户端进行通信。

服务端也要在子线程中实现。通过调用listenUsingRfcommWithServiceRecord（String UUID）方法可以得到一个BluetoothServerSocket的对象，
然后再用这个对象来调用accept()来返回一个BluetoothSocket对象。由于accept()是个阻塞的方法，它会直到接收到一个连接或异常之后才会返回，
所以要放在子线程中。

bluetoothServerSocket=bluetoothAdapter.listenUsingRfcommWithServiceRecord(bluetoothAdapter.getDefaultAdapter().getName(), UUID.fromString("00001101-0000-1000-8000-00805F9B34FB"));
//bluetoothServerSocket= (BluetoothServerSocket) bluetoothAdapter.getClass().getMethod("listenUsingRfcommOn",new Class[]{int.class}).invoke(bluetoothAdapter,10);
socket=bluetoothServerSocket.accept();//接收连接