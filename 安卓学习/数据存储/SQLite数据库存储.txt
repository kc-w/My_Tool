SQliteOpenHelper是一个抽象类，来管理数据库的创建和版本的管理。
这个辅助类继承自SQLiteOpenHelper类，在该类的构造器中，调用Context中的方法创建并打开一个指定名称的数据库对象。

onCreate(SQLiteDatabase db) : 当数据库被首次创建时执行该方法，一般将创建表等初始化操作在该方法中执行。
onUpgrade(SQLiteDatabse db,int oldVersion,int newVersion)：当打开数据库时传入的版本号与当前的版本号不同时会调用该方法。

android可以单独执行某一个方法,在方法的右边,如test()选择右键test-android run junit test执行(虚拟机需要打开)。
需要在清单文件Manifist.xml中配置一下(instrumentation标签写在manifest 标签下,uses-library写在application目录下)
<instrumentation
	    android:name="android.test.InstrumentationTestRunner"
	    android:targetPackage="com.ldw.sqlite"></instrumentation>

<uses-library android:name="android.test.runner"></uses-library>


//创建sqlite数据库
public class MyOpenHelper extends SQLiteOpenHelper {

	public MyOpenHelper(Context context, String name, CursorFactory factory,int version) {
		super(context, name, factory, version);
	}

	//数据库创建时调用
	@Override
	public void onCreate(SQLiteDatabase db) {
		db.execSQL("create table person(_id integer primary key autoincrement, name char(10), salary char(20), phone integer(20))");
		System.out.println("创建数据库");
	}

	//数据库升级时调用
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		System.out.println("数据库升级了");
	}
}



//增删改查
public class TestCase extends AndroidTestCase{

	private MyOpenHelper oh;
	private SQLiteDatabase db;

	public void test(){
        //获取可写可读数据库对象，如果数据库存在，直接打开，如果数据库不存在，先创建
		oh = new MyOpenHelper(getContext(), "people.db", null, 1);
		//获取数据库对象
		db = oh.getWritableDatabase();
	}

	//测试框架初始化完毕后，在测试方法执行之前，此方法调用
	@Override
	protected void setUp() throws Exception{
		super.setUp();
		oh = new MyOpenHelper(getContext(), "people.db", null, 1);
		db = oh.getWritableDatabase();

	}

	//测试方法执行完毕以后此方法调用
	@Override
	protected void tearDown() throws Exception{
		super.tearDown();
		db.close();
	}

	public void insert(){

		db.execSQL("insert into person (name, salary, phone)values(?, ?, ?)",new Object[]{"fhgfhf", "14000", 1302549110});
		db.execSQL("insert into person (name, salary, phone)values(?, ?, ?)",new Object[]{"ghfhfh", "14000", 1302549110});
		db.execSQL("insert into person (name, salary, phone)values(?, ?, ?)",new Object[]{"74gfhfhhfhf9", "14000", 1302549110});
	}

	public void delete(){
		db.execSQL("delete from person where name = ？",new Object[]{"aaaaa"});
	}

	public void update(){
		db.execSQL("update person set phone = ? where name = ?", new Object[]{321312, "aaaaa"});
	}

	public void select(){
		Cursor cursor = db.rawQuery("select name, salary from person ", null);

		while(cursor.moveToNext()){
			//通过指定字段名获取值
			String name = cursor.getString(cursor.getColumnIndex("name"));
			//通过索引获取值
			String salary = cursor.getString(1);
			System.out.println("name=" + name + "salary" + salary);
		}
	}

	//API方法实现增删该查
	public void insertApi(){
		//把要插入的数据全部封装到ContentValues对象
		ContentValues values = new ContentValues();
		values.put("name", "xxx");
		values.put("phone", "234324");
		values.put("salary",13423);
		db.insert("person", null, values);
	}

	public void deleteApi(){
		//返回删除的行数
		int i = db.delete("person", "name = ? and _id = ?", new String[]{"aaaaa" , "4"});
	}

	public void updateApi(){
		ContentValues values = new ContentValues();
		values.put("salary", 17000);
		//返回修改的行数
		int i = db.update("person", values, "name = ?", new String[]{"xxx"});
		System.out.println("i"+i);
	}

	public void selectApi(){
		Cursor cursor = db.query("person", null, null, null, null, null, null, null);
		while(cursor.moveToNext()){
			String name = cursor.getString(cursor.getColumnIndex("name"));
			String phone = cursor.getString(cursor.getColumnIndex("phone"));
			String salary = cursor.getString(cursor.getColumnIndex("salary"));
			System.out.println("name = " + name + "phone = " + phone + "salary = " + salary);
		}
	}

	public void transation(){
		try{
		    //开启事务
			db.beginTransaction();
			ContentValues values = new ContentValues();
			values.put("salary", 40000);
			db.update("person", values, "name = ?", new String[]{"luodewu"});

			//上下都使用一个values防止数据干扰
			values.clear();
			values.put("salary", 20000);
			db.update("person", values, "name = ?", new String[]{"luodewuluodewu"});

			//设置事物执行成功
			db.setTransactionSuccessful();
		}
		finally{
			//关闭事物，同时提交,如果已经设置事务执行成功，sql语句就生效了，反之语句回滚
			db.endTransaction();
		}
	}

}


