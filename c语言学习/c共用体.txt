共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。
您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。
union 共用体标签{
   成员定义;
   ...
}一个或多个共体变量;

共用体标签是可选的，成员定义是标准的变量定义。在共用体定义的末尾，可以指定一个或多个共用体变量，这是可选的。
union Data{
   int i;
   float f;
   char  str[20];
} data;


共用体大小(以最大字节单位为标准)
union Data{
   int i;//4字节
   float f;//4字节
   char  str[20];//该字节单位为20字节最大,所以该共用体大小为20字节
} data;


输出共用体成员

//有损输出
union Data{
   int i;
   float f;
   char  str[20];
};

int main( ){
   union Data data;

   data.i = 10;
   data.f = 220.5;
   strcpy( data.str, "C Programming");
   //可以看到共用体的 i 和 f 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 str 成员能够完好输出的原因
   printf( "data.i : %d\n", data.i);//输出为1917853763
   printf( "data.f : %f\n", data.f);//输出为4122360580327794860452759994368.000000
   printf( "data.str : %s\n", data.str);//输出为C Programming
   return 0;
}

//无损输出
union Data{
   int i;
   float f;
   char  str[20];
};

int main( ){
   union Data data;

   data.i = 10;
   printf( "data.i : %d\n", data.i);//输出为10

   data.f = 220.5;
   printf( "data.f : %f\n", data.f);//输出为220.500000

   strcpy( data.str, "C Programming");
   printf( "data.str : %s\n", data.str);//输出为C Programming

   return 0;
}