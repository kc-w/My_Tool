关键字	        说明
auto	        声明自动变量
break	        跳出当前循环
case	        开关语句分支
char	        声明字符型变量或函数返回值类型
const	        定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变
continue	    结束当前循环，开始下一轮循环
default	        开关语句中的"其它"分支
do	            循环语句的循环体
double	        声明双精度浮点型变量或函数返回值类型
else	        条件语句否定分支（与 if 连用）
enum	        声明枚举类型
extern	        声明变量或函数是在其它文件或本文件的其他位置定义
float	        声明浮点型变量或函数返回值类型
for	            一种循环语句
goto	        无条件跳转语句
if	            条件语句
int	            声明整型变量或函数
long	        声明长整型变量或函数返回值类型
register	    声明寄存器变量
return	        子程序返回语句（可以带参数，也可不带参数）
short	        声明短整型变量或函数
signed	        声明有符号类型变量或函数
sizeof	        计算数据类型或变量长度（即所占字节数）
static	        声明静态变量
struct	        声明结构体类型
switch	        用于开关语句
typedef	        用以给数据类型取别名
unsigned	    声明无符号类型变量或函数
union	        声明共用体类型
void	        声明函数无返回值或无参数，声明无类型指针
volatile	    说明变量在程序执行中可被隐含地改变
while	        循环语句的循环条件

---------------------------------------------------------------------------------

===整数类型
类型	        存储大小	        值范围
char	        1 字节	        -128 到 127 或 0 到 255
unsigned char	1 字节	        0 到 255
signed char	    1 字节	        -128 到 127
int	            2 或 4 字节	    -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647
unsigned int	2 或 4 字节	    0 到 65,535 或 0 到 4,294,967,295
short	        2 字节	        -32,768 到 32,767
unsigned short	2 字节	        0 到 65,535
long	        4 字节	        -2,147,483,648 到 2,147,483,647
unsigned long	4 字节	        0 到 4,294,967,295

----------------------------------------------------------------------------------

===浮点类型
类型	      存储大小	            值范围	                精度
float	      4 字节	            1.2E-38 到 3.4E+38	    6 位小数
double	      8 字节	            2.3E-308 到 1.7E+308	15 位小数
long double   16 字节	            3.4E-4932 到 1.1E+4932	19 位小数

----------------------------------------------------------------------------------

===void 类型

函数返回为空
C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status);

函数参数为空
C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void);

指针指向 void
类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。

----------------------------------------------------------------------------------

===C 中的变量声明

extern int i; //声明，不建立存储空间
int i; //声明，建立存储空间

----------------------------------------------------------------------------------

===整数常量
整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x或0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。
整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。
后缀可以是大写，也可以是小写，U 和 L 的顺序任意。

下面列举几个整数常量的实例：
212         /* 合法的 */
215u        /* 合法的 */
0xFeeL      /* 合法的 */
078         /* 非法的：8 不是八进制的数字 */
032UU       /* 非法的：不能重复后缀 */

以下是各种类型的整数常量的实例：
85         /* 十进制 */
0213       /* 八进制 */
0x4b       /* 十六进制 */
30         /* 整数 */
30u        /* 无符号整数 */
30l        /* 长整数 */
30ul       /* 无符号长整数 */

----------------------------------------------------------------------------------

===浮点常量
浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。
当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。
当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。

下面列举几个浮点常量的实例：

3.14159       /* 合法的 */
314159E-5L    /* 合法的 */
510E          /* 非法的：不完整的指数 */
210f          /* 非法的：没有小数或指数 */
.e55          /* 非法的：缺少整数或分数 */

----------------------------------------------------------------------------------

===字符常量
字符常量是括在单引号中，例如，'x' 可以存储在 char 类型的简单变量中。
字符常量可以是一个普通的字符（例如 'x'）、一个转义序列（例如 '\t'），或一个通用的字符（例如 '\u02C0'）。
在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。

转义序列	含义
\\	\ 字符
\'	' 字符
\"	" 字符
\?	? 字符
\a	警报铃声
\b	退格键
\f	换页符
\n	换行符
\r	回车
\t	水平制表符
\v	垂直制表符
\ooo	一到三位的八进制数
\xhh . . .	一个或多个数字的十六进制数

----------------------------------------------------------------------------------

===定义常量
在 C 中，有两种简单的定义常量的方式：

使用 #define 预处理器     #define LENGTH 10
使用 const 关键字         const int  LENGTH = 10;

----------------------------------------------------------------------------------

===杂项运算符 ↦ sizeof & 三元
运算符	            描述	            实例
sizeof()	        返回变量的大小。	    sizeof(a) 将返回 4，其中 a 是整数。
&	                返回变量的地址。	    &a; 将给出变量的实际地址。
*	                指向一个变量。	    *a; 将指向一个变量。

----------------------------------------------------------------------------------

for( ; ; )  :可以实现无限循环

goto语句

lable:printf("跳转到此处");
goto lable;

----------------------------------------------------------------------------------
===c语言中,函数需要声明后再使用

全局变量保存在内存的全局存储区中，占用静态的存储单元；
局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。

当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化

----------------------------------------------------------------------------------

在 C 中，您可以逐个初始化数组，也可以使用一个初始化语句，如下所示：
double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};
double balance[] = {1000.0, 2.0, 3.4, 7.0, 50.0};

int a[3][4] = {{0, 1, 2, 3},{4, 5, 6, 7},{8, 9, 10, 11}};
int a[3][4] = {0,1,2,3,4,5,6,7,8,9,10,11};

----------------------------------------------------------------------------------
//返回一个指针地址
int *getRandom( ){
    static int r[10];//需要定义为全局变量,否则main函数无法得到地址
    int i;
    for ( i = 0; i < 10; ++i){
        r[i] = i+1;
        printf( "r[%d] = %d\n", i, r[i]);

    }
    return r;
}

main (){
    int *p;
    int i;

    p = getRandom();//p指针指向地址
    for ( i = 0; i < 10; i++ ){
        //因为数组是连续的,所以指针地址每加1就会向后遍历数组
        printf( "*(p) : %d\n",*(p+i) );
    }


}

----------------------------------------------------------------------------------

===enum(枚举)

枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。

声明枚举类型:
enum　枚举名　{枚举元素1,枚举元素2,……};

//第一个枚举成员的值为整型，后续枚举成员的值在前一个成员上加1,实例中把第一个枚举成员的值定义为1，第二个就为2，以此类推。
//如果定义中间的变量为1,则中间变量之后的值依次加1,最前面的值以0开始
enum DAY{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
};

枚举变量的定义:
1、先定义枚举类型，再定义枚举变量
enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
};
enum DAY day;

2、定义枚举类型的同时定义枚举变量
enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
} day;

3、省略枚举名称，直接定义枚举变量
enum
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
} day;

----------------------------------------------------------------------------------
===c字符串
在 C 语言中，字符串实际上是使用 null 字符 '\0' 终止的一维字符数组。一个以 null 结尾的字符串，包含了组成字符串的字符。

下面创建了一个 "Hello" 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 "Hello" 的字符数多一个。
char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};

依据数组初始化规则，可以把上面的语句写成以下语句：
char greeting[] = "Hello";

----------------------------------------------------------------------------------
C typedef

C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 BYTE：
typedef unsigned char BYTE;

在这个类型定义之后，标识符 BYTE 可作为类型 unsigned char 的缩写，例如：
BYTE  b1, b2;

也可以使用 typedef 来为用户自定义的数据类型取一个新的名字
typedef struct Books{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} Book;

int main( ){
   Book book;

   strcpy( book.title, "C 教程");
   strcpy( book.author, "Runoob");
   strcpy( book.subject, "编程语言");
   book.book_id = 12345;

   printf( "书标题 : %s\n", book.title);
   printf( "书作者 : %s\n", book.author);
   printf( "书类目 : %s\n", book.subject);
   printf( "书 ID : %d\n", book.book_id);

   return 0;
}

typedef vs #define

#define 是 C 指令，用于为各种数据类型定义别名，与 typedef 类似，但是它们有以下几点不同：

typedef 仅限于为类型定义符号名称，#define 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。
typedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。

实例
#include <stdio.h>

#define TRUE  1
#define FALSE 0

int main( ){
   printf( "TRUE 的值: %d\n", TRUE);
   printf( "FALSE 的值: %d\n", FALSE);

   return 0;
}