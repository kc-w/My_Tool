数组允许定义可存储相同类型数据项的变量，结构是另一种用户自定义的可用的数据类型，它允许存储不同类型的数据项。
struct 结构体标签 {
    变量定义;
    变量定义;
    变量定义;
    ...
} 结构体变量 ;


struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;

===在一般情况下，结构体标签、变量定义、结构变量 这 3 部分至少要出现 2 个。以下为实例：

//此声明声明了变量定义,结构体变量,没有标明其标签
struct{
    int a;
    char b;
    double c;
} s1;

//此声明声明了变量定义,结构标签,结构体变量
struct book{
    int a;
    char b;
    double c;
};
//用book标签的结构体，另外声明了变量t1、t2、t3
struct book t1, t2[20], *t3;

//也可以用typedef创建新类型
typedef struct{
    int a;
    char b;
    double c;
} Simple;
//现在可以用Simple作为类型声明新的结构体变量
Simple u1, u2[20], *u3;

在上面的声明中，第一个和第二声明被编译器当作两个完全不同的类型，即使他们的成员列表是一样的，如果令t3=&s1，则是非法的。

===结构体的成员可以包含其他结构体,也可以包含指向自己结构体类型的指针,这种指针的应用是为了实现一些更高级的数据结构如链表和树等。

//此结构体的声明包含了其他的结构体
struct struct1{
    char string[100];
    struct book a;
};

//此结构体的声明包含了指向自己类型的指针
struct struct2{
    char string[100];
    struct struct2 *next_node;
};

===如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：

struct B;    //对结构体B进行不完整声明

//结构体A中包含指向结构体B的指针
struct A{
    struct B *partner;
    //other members;
};

//结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明
struct B{
    struct A *partner;
    //other members;
};

===结构体变量的初始化
struct Books{
    char  title[50];
    char  author[50];
    char  subject[100];
    int   book_id;
} book = {"C 语言", "RUNOOB", "编程语言", 123456};

int main(){
    printf("title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n", book.title, book.author, book.subject, book.book_id);
}


===结构作为函数参数
struct Books
{
    char  title[50];
    char  author[50];
    char  subject[100];
    int   book_id;
};

void printBook( struct Books *book );//声明函数
int main( )
{
    struct Books Book1;        /* 声明 Book1，类型为 Books */
    struct Books Book2;        /* 声明 Book2，类型为 Books */

    strcpy( Book1.title, "C Programming");
    strcpy( Book1.author, "Nuha Ali");
    strcpy( Book1.subject, "C Programming Tutorial");
    Book1.book_id = 6495407;

    strcpy( Book2.title, "Telecom Billing");
    strcpy( Book2.author, "Zara Ali");
    strcpy( Book2.subject, "Telecom Billing Tutorial");
    Book2.book_id = 6495700;

    printBook( &Book1 );

    printBook( &Book2 );

    return 0;
}
//实现函数
void printBook( struct Books *book ){
    printf( "Book title : %s\n", book->title);
    printf( "Book author : %s\n", book->author);
    printf( "Book subject : %s\n", book->subject);
    printf( "Book book_id : %d\n", book->book_id);
}

结构体大小(字节递增以数组类型最大的为标准,以下以int为例,如果总大小超过4字节则加4字节按8字节算,不同数据类型不可连续排放)
struct packed_struct {
    char  title[5]; //本来只占5字节,但以4字节为标准,所以占8字节
    int   book_id;//占4字节
    char  title1[6];//同理占8字节
};

struct packed_struct {
    char  title1[6];
    char  title[5];//与上面的数据类型相同可以连接在一起相加为11个字节,以4字节为标准占12个字节
    int   book_id;//占4个字节
};


===指向结构的指针
可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：
struct Books *struct_pointer;
struct_pointer = &Book1;
为了使用指向该结构的指针访问结构的成员，您必须使用 -> 运算符，如下所示：
struct_pointer->title;