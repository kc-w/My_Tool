//目录操作

返回删除目录是否成功
RemoveDir(const Dir: string)

返回创建目录是否成功
CreateDir(const Dir: string)

返回设置当前操作目录是否成功
SetCurrentDir(const Dir: string)

返回当前操作目录
GetCurrentDir

返回创建多级目录是否成功
ForceDirectories(Dir: string)

返回目录名FileName是否有实体存在
DirectoryExists(const Directory: string)

返回驱动器全部空间(单位为byte)参数Drive为0表示当前路径,为1表示=A驱,为2表示=B驱...;获取失败则返回-1
DiskSize(Drive: Byte)

返回驱动器可用空间
DiskFree(Drive: Byte)

返回目录列表中DirList搜索的第一个结果
FileSearch(const Name, DirList: string)

返回文件名FileName是否有实体存在
FileExists(const FileName: string)

返回文件名的完整表示
ExpandFileName(const FileName: string)

返回文件名的扩展名
ExtractFileExt(const FileName: string)

返回重命名文件是否成功
RenameFile(const OldName, NewName: string)

返回删除文件是否成功
DeleteFile(const FileName: string)

返回设置文件是否只读是否成功
FileSetReadOnly(const FileName: string; ReadOnly: Boolean)

返回文件是否只读
FileIsReadOnly(const FileName: string)

返回文件的属性
function FileGetAttr(const FileName: string)

返回设置文件搜索(搜索成功则返回0)
FindFirst(const Path: string; Attr: Integer; var F: TSearchRec)

继续文件搜索(搜索成功则返回0)
FindNext(var F: TSearchRec)

结束当前文件搜索
FindClose()




//遍历目录
function search_file(Filename:string):integer;
var
  dirs:TSearchRec;//目录对象
  FileAttrs:integer;//文件属性
begin
//查找文件属性  只读文件,   隐藏文件,  系统文件,   卷标文件,   目录文件,  归档文件/压缩文件,  任何文件
  FileAttrs := faReadonly + faHidden + faSysFile + faVolumeID + faDirectory + faArchive + faAnyFile;
  //如果搜索到符合要求的文件和文件夹
  if findfirst(Filename,FileAttrs,dirs)=0 then
    begin
      //循环,直到目录无法找到文件或文件夹
      repeat
        sleep(100);
        //根据文件或文件夹的属性进行判断,并去除'.'和'..'
        if ((dirs.Attr and FileAttrs)=dirs.Attr) and (dirs.Name<>'.')and(dirs.Name<>'..')then
          if (dirs.Attr = faDirectory) then
            Writeln('  文件夹: '+dirs.Name)
          else
            Writeln('  文件: '+dirs.Name);
      until FindNext(dirs)<>0;
      FindClose(dirs);//释放资源
    end
end;


//目录递归
function search_dir(Filename:string):integer;
var
   dirs1:TSearchRec;  //查找范围
begin
  if findfirst('*',fadirectory,dirs1)=0 then
    begin
      repeat
        if((dirs1.Attr=faDirectory)and(dirs1.Name<>'.')and(dirs1.Name<>'..'))then
           begin
             SetCurrentDir(dirs1.Name);
             writeln(dirs1.Name+'目录下的文件及文件夹:');
             search_file(Filename);
             search_dir(Filename);
           end;
      until findNext(dirs1)<>0;
      writeln(' ');
      SetCurrentDir('..');
      findclose(dirs1);
    end;
end;


begin

//定位目录
SetCurrentDir('E:\KwDownload');
//显示目录
writeln(GetCurrentDir+'目录下的文件及文件夹:');
//显示根目录下的文件及文件夹
search_file('*');
//递归遍历目录,显示所有文件
search_dir('*');

Readln;

end.


---------------------------------------------------------------------------------------


//复制文件,TFileStream

var
  getStream,setStream: TFileStream; {声明一个文件流}
  getPath,setPath: string;
begin

  getPath := 'C:\Users\Wkc23\Desktop\数据.csv'; {需要这个文件存在}
  setPath := 'E:\数据.csv'; {这个会自动建立}
  if not FileExists(getPath) then
    begin
      Writeln('找不到文件: ' + getPath);
    end;

  getStream := TFileStream.Create(getPath, fmOpenRead or fmShareExclusive);
  setStream := TFileStream.Create(setPath, fmCreate);
  {建立文件流需要两个参数: 参数 1 是路径, 参数 2 是打开模式}

  getStream.Position := 0; {流指针移到开始, 复制时从这里开始}
  setStream.CopyFrom(getStream, getStream.Size); {Copy 流}
  {CopyFrom 的参数 2 是要复制的内容大小; 如果为 0 , 不管指针在什么位置都会复制所有内容}
  {CopyFrom 返回实际拷贝的字节数}

  getStream.Free;
  setStream.Free;

end.

---------------------------------------------------------------------------------------

//使用TStringList读写文本文件

var
  textfile1,textfile2: TStringList;

begin

textfile1 := TStringList.Create;//创建文本对象
textfile2 := TStringList.Create;

{写文件}
textfile1.Add('0=开始');//会清文本原有内容然后重新写入
textfile1.Insert(1,'1=111111111'); // 按顺序进行文本添加操作
textfile1.Insert(2,'2=22222222222');
textfile1.SaveToFile('E:\test.txt',TEncoding.Unicode);//保存路径

{读文件}
textfile2.LoadFromFile('E:\test.txt',TEncoding.Unicode);
Writeln(textfile2.Values['1']);//通过'='前的字符串来查找输出'='后的字符串
Writeln(textfile2.ValueFromIndex[0]);

textfile1.Free; //释放
textfile2.Free;

end.


---------------------------------------------------------------------------------------

//使用TextFile读写文本文件

var
  i: Integer;
  str: string;
  MyTextFile: TextFile;//定义变量MyTextFile为文本文件类型


begin

(*将文件变量与外部文件联系。相当于为外部文件找了个“替身”*)
AssignFile(MyTextFile, 'C:\Users\Wkc23\Desktop\数据.csv');

(*判断操作的文件是否存在,不存在则创建文件。*)
if FileExists('C:\Users\Wkc23\Desktop\数据.csv') then
  begin
    Reset(MyTextFile);//读文件
//    Append(MyTextFile);//在文件末尾追加
  end
else
  begin
    Rewrite(MyTextFile);//新建文件覆盖原文件
  end;

//Writeln为行写入并换行,Write为写入不换行,Readln为读一行并换行,Read为读但不换行

//读取文本文件
while not Eof(MyTextFile) do
  begin
    Readln(MyTextFile, str);//读取一行数据到str
    Writeln(IntToStr(i)+': ' +Utf8ToAnsi(str));
    Inc(i);
  end;

//写文本文件,中文编码问题未解决?????
//WriteLn(MyTextFile,'中国');
//Flush(MyTextFile);//清空缓冲区,确保字符串已经写入文件之中。
//
//CloseFile(MyTextFile);//回收资源


readln;

end.

---------------------------------------------------------------------------------------




