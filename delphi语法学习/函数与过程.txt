program ConsoleDemo1;//声明项目名称(程序头)

{$APPTYPE CONSOLE}//声明程序类型

{$R *.res}

//在程序主文件中使用到的所有.pas 文件的名称必需列在 uses 从句中
uses
  System.SysUtils;


//普通声明,procedure和function的区别为function必须要有返回值,而procedure可以不用带返回值
procedure 过程名(形参列表);[指示字]; [调用约定;]
function 函数名(形参列表):返回值类型;[指示字]; [调用约定;]


//external 声明:需要从其它的编译单元如.obj 或.dll 文件中引用一个例程
//声明一个调用.dll文件的语法,external 后应接上.dll 文件的路径名
procedure sample1(var s:string); external 'SomeDLL.dll';
//声明一个调用.obj文件的语法,在声明之前必须在程序中引用相应的.obj 文件,{$L block.obj}
procedure sample2(var s:string); external;


//forward 声明,用于提前声明一个例程,它可使得例程在定义之前就可被使用
procedure fun1; forward;// 当此处的 forward 去掉时将无法通过编译 


//参数传递
(1).传址方式:若形参数的值发生了改变，实参变量的值将会随之改变,必须传入变量名,不能传入实际值 
procedure var_sample(var i: integer);


(2).传值方式:系统将i的值复制一份为i2,并将i2穿入过程,等 var_sample 运行完毕后i2即被销毁 
procedure  var_sample(i: integer); //去掉 i 前的 var 


(3).常量方式:此种方式传递的参数不能被改变,不过把对象引用或指针以const方式作为参数传入时,可以改变对象的属性值或字段值
procedure  var_sample(const i: integer); //用 const 声明 i 


(4).输出方式:此种声明方式将要返回的值当成参数传入
procedure sample3(s:string; out leng:integer);//使用out声明需要返回的参数


(5).默认参数:调用可以不传参数,这样将会选择默认参数,如果前面的参数设置了默认值,后面的参数也必须设置默认值
function myfun(i:integer = 3;s:string = 'Delphi'):string;


(6).无类型参数:声明无类型参数的传递方式可为const,out或是var方式,但不能为默认的传值方式
不可将整型直接常量或值为整数的无类型符号常量赋予无类型参数
function Sample( var C):integer;

(7).数组参数:
一:传入静态数组时先自定义数组类型
type
  myarray = array[0..4] of integer;
procedure sample(var array1: myarray);

二:传入开放数组:开放数组可以是静态数组或动态数组
procedure sample(var array2 :array of integer);


begin
  try



  Readln;

  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.