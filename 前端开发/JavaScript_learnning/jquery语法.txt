选择器
$("*")[选择所有元素]
$("p")[在页面中选取所有 <p> 元素]
$("h1,p")[同时选择<h1>和<p>标签]
$("#test")[通过 HTML 元素的 id 属性选取指定的元素]
$(".test")[通过指定的 class 查找元素]
$(this)[选取当前 HTML 元素]
$("p.intro")[选取 class 为 intro 的 <p> 元素]
$("p:first")[选取第一个 <p> 元素]
$("form>input")[选择<form>标签所有的<input>子元素标签]
$("div p")[选择<div>标签所有的后代<p>元素标签]
$("div+p")[选择<div>标签相邻的同辈<p>元素标签]

$("p").parent();[返回被选元素的直接父元素]
$("p").parents();[返回被选元素的所有祖先]
$("p").parents("ul");[返回被选元素的所有祖先,并且它是ul元素]
$("p").parentsUntil("div");[返回介于p与div元素之间的所有祖先元素]

$("div").children();[返回每个div元素的所有直接子元素]
$("div").children("p.1");[返回类名为 "1" 的所有 <p> 元素，并且它们是 <div> 的直接子元素]
$("div").find("span");[返回 <div> 的所有后代]

$("h2").siblings();[返回 <h2> 的所有同胞元素]
$("h2").siblings("p");[返回属于 <h2> 的同胞元素的所有 <p> 元素]
$("h2").next();[返回 <h2> 的下一个同胞元素]
$("h2").nextAll();[返回所有<h2>后面的同胞元素]
$("h2").nextUntil("h6");[返回介于 <h2> 与 <h6> 元素之间的所有同胞元素]

$("div p").first();[选取首个 <div> 元素内部的第一个 <p> 元素]
$("div p").last();[选择最后一个 <div> 元素中的最后一个 <p> 元素]
$("p").eq(1);[返回被选元素中带有指定索引号的元素]
$("p").filter(".url");[返回带有类名 "url" 的所有 <p> 元素]
$("p").not(".url");[返回不带有类名 "url" 的所有 <p> 元素]

-------------------------------------------------------------------------

DOM 操作
$("p").text("");$("p").text();[设置或返回所选元素的文本内容]
$("p").html("");$("p").html();[设置或返回所选元素的内容（包括 HTML 标记）]
$("p").val("");$("p").val();[设置或返回value属性的值]
$("p").attr("属性名");[用于获取属性值]
$("p").attr({"属性名1":"改变的属性值1","属性名2":"改变的属性值2"});[改变属性值]
$("p").append("<b>追加文本</b>");[在被选元素的子元素结尾插入内容]
$("p").prepend("<b>追加文本</b>");[在被选元素的子元素开头插入内容]
$("p").after("文本1","文本2");[在被选元素之后插入内容]
$("p").before("文本1","文本2");[在被选元素之前插入内容]

$("p").remove();[删除被选元素及其子元素]
$("p").remove(".name");[删除 class="name" 的所有p元素]
$("p").empty();[删除被选元素的子元素]

$("body div:first").addClass("class名");[向被选元素添加一个或多个class类名]
$("h1,h2,p").removeClass("class名");[删除指定的 class 属性]
$("h1,h2,p").toggleClass("class名");[对被选元素进行添加/删除类的切换操作]
$("p").css("background-color");[获得背景色的值]
$("p").css({"background-color":"yellow","font-size":"200%"});[设置多个 CSS 属性]


-------------------------------------------------------------------------

事件
$(document).ready(function(){});[在文档完全加载完后执行函数]
$("p").click(function(){});[指定一个点击事件]
$("p").dblclick(function(){});[当双击元素时，会发生 dblclick 事件]
$("p").mouseenter(function(){});[当鼠标指针穿过元素时，会发生 mouseenter 事件]
$("p").mouseemove(function(){});[当鼠标指针在指定元素中移动一个像素，会发生 mouseemove 事件]
$("p").mouseleave(function(){});[当鼠标指针离开元素时，会发生 mouseleave 事件]
$("p").focus(function(){});[当元素获得焦点时，发生 focus 事件]
$("p").blur(function(){});[当元素失去焦点时，发生 blur 事件]
$("p").hover(function(){},function(){});[当鼠标移动到元素上时，会触发第一个函数;当鼠标移出这个元素时，会触发第二个函数]
$("input").keydown(function(){});[当键盘按下时触发]
$("input").keypress(function(){});[发生在当前获得焦点的元素上，键盘按下时触发]
$("input").keyup(function(){});[发生在当前获得焦点的元素上，键盘松开时触发]
$("img").error(function(){};[当元素没有正确载入时,将发生error事件]
$(window).resize(function(){});[当调整浏览器窗口大小时,将发生resize事件]
$(window).scroll(function(){});[当滚动窗口时将发生scroll事件，也可以使用在元素中，只要元素有滚动条]
$("p").load(function(){});[当指定元素加载时将触发load事件]
$("p").bind("事件1 事件2"，function(){});[让一个元素绑定多个事件]
$("p").unbind("事件1,事件2...",function(){});[如果无任何参数则取消该元素所绑定的所有事件，函数定义为取消所绑定元素事件内的函数名]
$("p").one("事件"，function(){});[当指定的事件发生一次后，执行一次函数，只运行一次]

-------------------------------------------------------------------------

动画
$("p").hide(1,2);[隐藏元素,1参数规定隐藏的毫秒数,2参数规定隐藏后需要执行的函数]
$("p").show(1,2);[显示元素,1参数规定显示的毫秒数,2参数规定显示后需要执行的函数]
$("p").toggle(1,2);[切换 hide() 和 show() 方法,1参数规定隐藏或显示的毫秒数,2参数规定需要执行的函数]
$("p").toggle(1);[切换 hide() 和 show() 方法,1参数规定隐藏或显示的毫秒数]
$("p").toggle(函数1,函数2，....);[切换 hide() 和 show() 方法,在函数之间切换]

$("p").fadeIn(1,2);[淡入已隐藏的元素,1参数规定毫秒数,2参数规定需要执行的函数]
$("p").fadeOut(1,2);[淡出已显示的元素,1参数规定毫秒数,2参数规定需要执行的函数]
$("p").fadeToggle(1,2);[在 fadeIn() 与 fadeOut() 方法之间进行切换,1参数规定毫秒数,2参数规定需要执行的函数]

$("p").fadeTo(1,2,3);[1参数规定毫秒数,2参数规定渐变为给定的不透明度(值介于0与1之间),3参数规定显示后需要执行的函数]

$("p").slideDown(1,2);[用于向下滑动元素,1参数规定毫秒数,2参数规定需要执行的函数]
$("p").slideUp(1,2);[用于向上滑动元素,1参数规定毫秒数,2参数规定需要执行的函数]
$("p").slideToggle(1,2);[在 slideDown() 与 slideUp() 方法之间进行切换,1参数规定毫秒数,2参数规定需要执行的函数]


$("p").animate({1},2,3);[创建自定义动画,1参数定义形成动画的 CSS 属性(不支持颜色,可以定义相对值:如+=,-=),2参数规定毫秒数,3参数规定需要执行的函数]
如:$("p").animate({height:'+=300px',opacity:'0.4,fontSize:'3em''}
注:默认情况下所有的 HTML 元素有一个静态的位置，且是不可移动的。 如果需要改变,我们需要将元素的 position 属性设置为absolute!

$("p").stop(1,2);[停止动画或效果,1参数规定是否应该清除动画队列.true/false默认是false，即仅停止活动的动画，允许任何排入队列的动画向后执行,2参数规定是否立即完成当前动画.true/false默认是 false]


----------------------------------------------------------------------------------------------------

$.ajax({})请求
async:true/false[表示请求是否异步处理，默认为true]  同步:浏览器会阻塞,直到后台响应  异步:不等待后台响应,直接执行下面的代码
cache:true/false[表示浏览器是否缓存被请求页面，默认为true]
type:[规定请求类型]
url:[请求的地址]
contentType:[发送数据到服务器时的数据类型]
dataType:[预期的服务器响应数据格式]
date:[规定要发送到服务器的数据]
error:function(){}[请求失败后调用的函数]
success:function(date){}[请求成功后调用的函数]

        $.ajax({
            url: "/testLogin",
            type: "post",
            async:false,
            data: JSON.stringify({user_number: username, user_password: password}),
            contentType: "application/json;charset=UTF-8",
            success: function (data) {
                if (data == "ok") {
                    mark=true;
                } else {
                    alert("账号或密码错误!");
                }
            },
            error: function () {
                alert("ajax请求异常!");
            }
        });
    })

