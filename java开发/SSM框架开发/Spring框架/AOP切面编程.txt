AOP的全称是Aspect-Oriented Programming，即面向切面编程(也称面向方面编程)。它是面向对象编程(00P)的一种补充，目前已成为一种比较成熟的编程方式。

在传统的业务处理代码中，通常都会进行事务处理、日志记录等操作。虽然使用00P可以通过组合或者继承的方式来达到代码的重用，但如果要实现某个功能(如日志记录)，同样的代码仍然会分散到各个方法中。这样，如果想要关闭某个功能，或者对其进行修改、就必须要修改所有的相关方法,这不但增加了开发人员的工作量，而且提高了代码的出错率。

为了解决这一问题，AOP思想随之产生。AOP采取横向抽取机制，将分散在各个方法中的重复代码提取出来，然后在程序编译或运行时，再将这些提取出来的代码应用到需要执行的地方。这种采用横向抽取机制的方式，采用传统的00P思想显然是无法办到的，因为00P只能实现父子关系的纵向的重用。虽然AOP是一种新的编程思想，但却不是00P的替代品，它只是00P的延伸和补充.

AOP术语:
Aspect(切面): 在实际应用中，切面通常是指封装的用于横向插入系统功能(如事务日志等)的类。
Joinpoint(连接点): 在程序执行过程中的某个阶段点，它实际上是对象的一个操作，例如方法的调用或异常的抛出。在Spring AOP中，连接点就是指方法的调用。
Pointcut(切入点)：是指切面与程序流程的交叉点，即那些需要处理的连接点，切入点指的是类或者方法名，如某个通知要应用到所有以add开头的方法中,那么满足这个的方法就是切入点.
Advice(通知/增强处理): AOP框架在特定的切入点执行的增强处理，即在定义好的切入点处所要执行的程序代码,可以将其理解为切面类中的方法，它是切面的具体实现。
Target Object(目标对象): 是指所有被通知的对象，也称为被增强对象。如果AOP框架采用的是动态的AOP实现，那么该对象就是一个被代理对象。
Proxy(代理): 将通知应用到目标对象之后，被动态创建的对象。
Weaving(织入): 将切面代码插入到目标对象上，从而生成代理对象的过程.




1:JDK动态代理：是通过java.lang.reflect.Proxy类实现的，我们可以调用Proxy类的newProxyInstance()方法来创建代理对象。

2:CGLIB代理：JDK动态代理的使用非常简单，但它还有一定的局限性---使用动态代里的对象必须实现一个或多个接口。如果要对没有实现接口的类进行代理，那么可以使用CGLIB代理。

3:Spring中基于代理类的AOP实现:默认使用JDK动态代理的方法来实现。
Spring的通知类型：
org.aopalliance.intercept.MethodInterceptor(环绕通知)
在目标方法执行前后实施增强，可以应用于日志、事务管理等功能。

org.springframework.aop.MethodBeforeAdvice(前置通知)
在目标方法执行前实施增强，可以应用于权限管理等功能。

org.springframework.aop.AfterReturningAdvice(后置通知)
在目标方法执行后实施增强，可以应用于关闭流、上传文件、删除临时文件等功能。

org.springframework.aop.ThrowsAdvice(异常通知)
在方法抛出异常后实施增强，可以应用于处理异常记录日志等功能。

org.springframework.aop.IntroductionInterceptor(引介通知)
在目标类中添加一些新的方法和属性，可以应用于修改老版本程序

4:AspectJ实现:AspectJ是一个基于JAVA语言的AOP框架,它提供了强大的AOP功能,有基于XML和注解这两种开发方法.