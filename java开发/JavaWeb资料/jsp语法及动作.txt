注释：<%--jsp注释-->（还可以引入html中的注释和java中的注释）

jsp声明：<%!变量定义/方法定义/类%>（在<head>标签末尾和<body>标签开头之间）

jsp表达式：<%=变量或者表达式%>

jsp指令：【1】页面属性相关的page指令：<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>（language属性设置语言，                            import属性进行导入类文件，pageEncoding属性定义编码方式）
         【2】引入文件的include指令：<%@include file="需要引入文件的路径"%>
         【3】与标签相关的taglib指令：<%@taglib uri="tagliburl" prefix="tagpre"%>(用户可以自定义新的标签在页面中执行，uri属性表示自定                          义标签库的存放位置，prefix属性是为了区分不同标签库的标签名)

jsp动作：【1】<jsp:forward>：（<jsp:forward>动作的作用是转发请求到另一个页面，在请求过程中会连同请求的参数数据一起转发到目标页面中，目标页面由                              request.getParameter("参数名称")方法接受参数值）
          语法为：<jsp:forward page="需要跳转的文件路径"/>（只有page这一个属性）
          #注意：1：虽然会跳转到另一个页面，但是地址栏处的地址并不会更新，还是上一个页面的地址，所以该指令具有隐蔽性。
                 2：跳转的文件只能是该web应用中的文件，不能是以外的文件。
-------------------------------------------------------------------------------------------------------------------
         【2】<jsp:include>：（<jsp:include>动作与include指令相似，他们的作用都是引入文件到目标页面）
          语法为：<jsp:include page="需要引入文件的路径" flush="true"/>(其中page属性为该jsp动作的必要属性，flush属性用于指定输出缓存是                             否转移到被导入文件中，如果为true则包含在被导入文件中，如果为false则包含在原文件中)
          #注意：1：page属性所指的绝对路径不是文件系统的绝对路径，而是以应用系统目录为根目录的绝对路静，通常web应用下的WEB-INF目录就是根目录。
                 2：<jsp:include>动作与include指令结果虽然相同，但还是有不同的地方，<jsp:include>动作是在页面被访问时导入的，导入文件和主页面是                    两个相对独立的文件，在编译时会被编译成两个Servlet类文件；而include指令是有jsp引擎编译时导入的，导入的文件和主页面会一块编译                      成一个Servlet类文件，所以include指令效率更高一些。
---------------------------------------------------------------------------------------------------------------------
         【3】<jsp:param>：（jsp:param动作用来传递参数信息，经常和<jsp:forward>和<jsp:include>一起使用传递参数到目标页面）
          语法为：<jsp:pare name="参数名称" value="参数值"/>
          #注意：所有页面编码格式要统一，否则在传递中文时会出现乱码问题。request.setCharacterEncoding方法是设定传递参数的编码格式，在传递中文时          要特别注意。在URL中包含参数传递时，可能会出现中文乱码或特殊字符问题，需要对这些参数进行编码处理。在javascript中，通过调用encodeURI函数          或者encodeURIComponent实现编码，在jsp脚本中，通过方法URLEncoder.encode实现转码
--------------------------------------------------------------------------------------------------------------------

         【4】<jsp:plugin>
--------------------------------------------------------------------------------------------------------------
         【5】<jsp:useBeen>：详情看jsp1
语法：<jsp:useBean
            id="name"
            scope="page|request|session|application"

               class="package.class"|
               type="package.class"|
               class="package.class" type="package.class"|
               beanName="{package.class|<%=expression%>}" type="package.class">

</jsp:useBean>

id：给Bean起的一个变量名，可以在指定的范围中使用该变量名
class：Bean的类路径，必须是严格的package.class，不能指定其父类
scope：Bean的有效范围，取值有page、request、session、application
beanName：实例化的类名称或序列化模板的名称，指定的名称可以为其接口、父类
type：指定其父类或接口的类型，譬如想实例化HashMap，但是type可以填Map

#注意
1.class或beanName不能同时存在。若JavaBean对象已存在，class和bean Name属性可以不指定，只需指定type属性
2.class可省去type独立使用，但beanName必须和type一起使用
3.class指定的类必须包含public、无参的构造方法
4.class或beanName指定的类必须包括包名称，而type可以省去包名，通过<%@pageimport="  "'%>指定所属包。

<jsp:useBean>标签中Bean的作用域有4个：page、 Request、 session、Application。JSP引擎会根据作用域给用户分配不同的Bean，运行多个用户拥有相同的Bean，每个客户的Bean是相互独立的。

当指定的范围为request时，针对同一用户的不同请求，JSP引擎都会给用户分配不同的Bean对象。当响应结束时，取消分配的Bean。Bean的生命周期就是从客户请求开始到响应结束这段时间。

当指定的范围为page时，针对同一用户访问不同的页面，JSP引擎都会给用户分配不同的Bean对象。当客户进入当前页时，Jsp引擎给用户分配一个Bean对象当用户离开当前页
时，取消分配的Bean对象。因此，该Bean的生命周期就是在当前页，

当指定的范围为session时，针对同一用户访问同一Web项目下不同的页面，JSP引擎部会给用户分配不同的Bean对象、当客户访问Web项目中的某一目录下的页面时，JSP引擎给
用户分配一个Bean对象，当用户离开Web目录时，取消分配的Bean对象。因此，该Bean的生命周期是Web项目的一个Session时间。

当指定的范围为application时，JSP引擎为访问用户分配同一个Bean对象。它的生命局期就是该Web应用的存在时间即Web应用在服务器中存在的时间。
-----------------------------------------------------------------------------------------------------------------------------
         【6】<jsp:getProperty>（使用<jsp:getProperty>可以设置Bean属性值,但在此之前需要使用<jsp:useBean>标签创建一个Bean）
语法：<jsp:getProperty
      name="name"

       property="propertyname"


      />
----------------------------------------------------------------------------------------------------------------------------

         【7】<jsp:setProperty>（使用<jsp:setProperty>可以设置Bean属性值,但在此之前需要使用<jsp:useBean>标签创建一个Bean）
语法：<jsp:setProperty
      name="name"
       property="*"|
       property="propertyname"[param="parametername"]|
       property="propertyname"value="{string | <%=expression%>}"
      />

name：指定Bean的名字，用来指定被使用的Bean，它的值必须是<jsp:useBean>标签中的id值
property：指定Bean的属性名，也就是Bean类中的属性，将值赋给Bean类的属性
param：指定表单的参数名称
value：要设定的属性值

使用<jsp:setProperty>标签有3种方式：
（1）使用字符串或者表达式给Bean属性赋值。其要求是表达式的值与Bean属性的值类型要相同
（2）使用表单参数形式给Bean属性赋值。其要求是表单中提供的参数名字与Bean属性的名字要相同。这种形式不用具体指定每个Bean属性的名字，系统会自动根据表单的参数名字与Bean属性的名字一一对应赋值。该形式不用value属性。因此其语法形式为：<jsp:setProperty property=" "name=" "/>
（3）使用表单参数值给Bean属性赋值。其要求是表单中提供的参数名字与<jsp:setProperty>标签中的param属性值名字相同。其语法形式为：
<jsp:setProperty property="Bean类中的属性名" param="表单参数名" name="Bean的变量名"/>
---------------------------------------------------------------------------------------------------------------------
         【8】<jsp:output>
--------------------------------------------------------------------------------------------------------------------
         【9】<jsp:attribute>
--------------------------------------------------------------------------------------------------------------------
         【10】<jsp:element>
--------------------------------------------------------------------------------------------------------------------
         【11】<jsp:body>
--------------------------------------------------------------------------------------------------------------------
         【12】<jsp:params>
--------------------------------------------------------------------------------------------------------------------
         【13】<jsp:fallback>

