//创建服务器证书
keytool -genkey -alias tomcat -keyalg RSA -keysize 1024 -validity 365 -storetype PKCS12 -keystore C:\Users\Wkc23\Desktop\tomcat.keystore -storepass 999999999

//创建客户端证书
keytool -genkey -alias client -keyalg RSA -keysize 1024 -validity 365 -storetype PKCS12 -keystore C:\Users\Wkc23\Desktop\client.p12 -storepass 88888888

//将客户端证书导出为一个单独的cer文件
keytool -export -alias client -keystore C:\Users\Wkc23\Desktop\client.p12 -storetype PKCS12 -file C:\Users\Wkc23\Desktop\client.cer

//将cer文件导入到服务器的证书库，服务器信任客户端证书
keytool -import -file C:\Users\Wkc23\Desktop\client.cer -keystore C:\Users\Wkc23\Desktop\tomcat.keystore -storepass 999999999

//查看证书库中的证书,其中有服务器证书和受信任的客户端证书
keytool -list -keystore C:\Users\Wkc23\Desktop\tomcat.keystore

//将服务器证书导出为一个单独的cer文件
keytool -keystore C:\Users\Wkc23\Desktop\tomcat.keystore -export -alias tomcat -file C:\Users\Wkc23\Desktop\tomcat.cer

//让客户端信任服务器证书
1:双击tomcat.cer文件，按照提示安装证书
2:打开浏览器   - 工具  -  internet选项-内容- 证书-把中级证书颁发机构里的(名称即你前面生成证书时填写的名字与姓氏)证书导出来,再把导出来的证书导入受信任的根颁发机构

//配置tomcat服务器
<Connector  port="8443"
protocol="org.apache.coyote.http11.Http11NioProtocol" SSLEnabled="true"
maxThreads="150"
scheme="https"
secure="true"
clientAuth="true"
sslProtocol="TLS"
keystoreFile="C:\Users\Wkc23\Desktop\tomcat.keystore"
keystorePass="999999999"
truststoreFile="C:\Users\Wkc23\Desktop\tomcat.keystore"
truststorePass="999999999" />
属性说明：
clientAuth:设置是否双向验证，默认为false，设置为true代表双向验证
keystoreFile:服务器证书文件路径
keystorePass:服务器证书密码
truststoreFile:用来验证客户端证书的根证书，此例中就是服务器证书
truststorePass:根证书密码
注意：
① 设置clientAuth属性为True时，需要手动导入客户端证书才能访问。
② 要访问https请求 需要访问8443端口，访问http请求则访问Tomcat默认端口（你自己设置的端口，默认8080）即可。
强制https访问:
在 tomcat /conf/web.xml 中的 </welcome- file-list> 后面加上这
<login-config>
   <auth-method>CLIENT-CERT</auth-method>    
   <realm-name>Client Cert Users-only Area</realm-name>    
</login-config>    
<security-constraint>     
   <web-resource-collection >    
      <web-resource-name >SSL</web-resource-name>    
      <url-pattern>/*</url-pattern>    
   </web-resource-collection>    
   <user-data-constraint>    
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>    
   </user-data-constraint>   
</security-constraint> 
