二进制运算
变量 A 的值为 60
变量 B 的值为 13

A的二进制为:0011 1100
B的二进制为:0000 1101

A & B(二进制与运算)
0011 1100
&           = 0000 1100
0000 1101

A | B(二进制或运算)
0011 1100
|           = 0011 1101
0000 1101

A ^ B(二进制异或运算:相同为0,相异为1)
0011 1100
^           = 0011 0001
0000 1101


~A (补码:0变成1,1变成0)
~0011 1100 = 1100 0011



运算符	                描述
sizeof	                sizeof 运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。
Condition ? X : Y	    条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。
,	                    逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。
.                       （点）和 ->（箭头）	成员运算符用于引用类、结构和共用体的成员。
Cast	                强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。
&	                    指针运算符 & 返回变量的地址。例如 &a; 将给出变量的实际地址。
*	                    指针运算符 * 指向一个变量。例如，*var; 将指向变量 var。



Lambda 函数与表达式


[]      // 沒有定义任何变量。使用未定义变量会引发错误。
[x, &y] // x以传值方式传入（默认），y以引用方式传入。
[&]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。
[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。
[&, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。
[=, &z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。


如果有返回值可以表示为：
[capture](parameters)->return-type{body}
[](int x, int y){ return x < y ; }


如果没有返回值可以表示为：
[capture](parameters){body}
[]{ ++global_x; }


在一个更为复杂的例子中，返回类型可以被明确的指定如下：
[](int x, int y) -> int { int z = x + y; return z + x; }


[this]() { this->someFunc(); }();