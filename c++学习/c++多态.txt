多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。
C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数


#include <iostream>
using namespace std;

class Shape {
   protected:
      int width, height;
   public:
      Shape( int a=0, int b=0){
         width = a;
         height = b;
      }

      //虚函数 是在基类中使用关键字 virtual 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数
      //如果不加virtual声明则为静态链接,也被称为早绑定,加了就是动态链接，或后期绑定
      virtual int area(){
         cout << "Shape class" <<endl;
         return 0;
      }
};
class Rectangle: public Shape{
   public:
      Rectangle( int a=0, int b=0):Shape(a, b) { }
      int area (){
         cout << "Rectangle class" <<endl;
         return (width * height);
      }
};
class Triangle: public Shape{
   public:
      Triangle( int a=0, int b=0):Shape(a, b) { }
      int area (){
         cout << "Triangle class" <<endl;
         return (width * height / 2);
      }
};
// 程序的主函数
int main( ){
   Shape *shape;
   Rectangle re(10,7);
   Triangle  tr(10,5);

   // 存储矩形的地址
   shape = &re;
   // 调用矩形的求面积函数 area
   shape->area();

   // 存储三角形的地址
   shape = &tr;
   // 调用三角形的求面积函数 area
   shape->area();

   return 0;
}