#include <iostream>
using namespace std;

double division(int a, int b){
   if( b == 0 ){
       //主动声明异常
      throw "Division by zero condition!";
   }
   return (a/b);
}

int main (){
   int x = 50;
   int y = 0;
   double z = 0;

   try {
     z = division(x, y);
     cout << z << endl;
   }catch (const char* msg) {
       //捕捉异常并输出
     cerr << msg << endl;
   }

   return 0;
}




可以通过继承和重载 exception 类来定义新的异常

#include <iostream>
#include <exception>
using namespace std;

struct MyException : public exception{
  const char * what() const throw(){
    return "C++ Exception";
  }
};

int main(){
  try{
    throw MyException();
  }catch(MyException e){
    cout << "MyException caught" <<endl;
    cout << e.what() <<endl;
  }
  catch(exception e){
    //其他的错误
  }
}

