111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
find_all( name , attrs , recursive , text , **kwargs )[返回所有符合的列表]
[name 参数]

(可以查找所有名字为 name 的标签)
soup.find_all("title")
# [<title>The Dormouse's story</title>]
-------------------------------------------------------------------------------------------------------
[keyword 参数]

(如果包含一个名字为 id 的参数,BeautifulSoup会搜索每个标签的”id”属性)
soup.find_all(id='link2')
# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]

(如果传入 href 参数,BeautifulSoup会搜索每个标签的”href”属性,搜索指定名字的属性时可以使用的参数值包括 字符串 , 正则表达式 , 列表, True .)
soup.find_all(href=re.compile("elsie"))
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]

(查找所有包含 id 属性的标签,无论 id 的值是什么)
soup.find_all(id=True)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

(使用多个指定名字的参数可以同时过滤标签的多个属性)
soup.find_all(href=re.compile("elsie"), id='link1')
# [<a class="sister" href="http://example.com/elsie" id="link1">three</a>]


(标识CSS类名的关键字class在Python中是保留字,可以通过class_ 参数搜索有指定CSS类名的标签)
soup.find_all("a", class_="sister")
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

(class_ 参数同样接受不同类型的 过滤器 ,字符串,正则表达式,方法或 True)
soup.find_all(class_=re.compile("itl"))
# [<p class="title"><b>The Dormouse's story</b></p>]

(标签的 class 属性是 多值属性 .按照CSS类名搜索标签时,可以分别搜索标签中的每个CSS类名)
css_soup.find_all("p", class_="strikeout")
# [<p class="body strikeout"></p>]

css_soup.find_all("p", class_="body")
# [<p class="body strikeout"></p>]

(搜索 class 属性时也可以通过CSS值完全匹配,但class名的顺序需要一致)
css_soup.find_all("p", class_="body strikeout")
# [<p class="body strikeout"></p>]

-------------------------------------------------------------------------------------------------------
[text 参数]

(通过 text 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表, True)
soup.find_all(text="Elsie")字符串
# [u'Elsie']

soup.find_all(text=["Tillie", "Elsie", "Lacie"])列表
# [u'Elsie', u'Lacie', u'Tillie']

soup.find_all(text=re.compile("Dormouse"))正则表达式
[u"The Dormouse's story", u"The Dormouse's story"]

(text 参数用于搜索字符串,还可以与其它参数混合使用)
soup.find_all("a", text="Elsie")
# [<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>]

-------------------------------------------------------------------------------------------------------------------
[recursive 参数]

(调用标签的 find_all() 方法时,Beautiful Soup会检索当前标签的所有子孙节点,如果只想搜索标签的直接子节点,可以使用参数 recursive=False)
soup.html.find_all("title")
# [<title>The Dormouse's story</title>]

soup.html.find_all("title", recursive=False)
# []

-------------------------------------------------------------------------------------------------------------------
[limit 参数]

(文档树中有3个标签符合搜索条件,但结果只返回了2个)
soup.find_all("a", limit=2)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]

2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
find( name , attrs , recursive , text , **kwargs )[只返回第一个符合条件的字符串]
soup.find('title')
# <title>The Dormouse's story</title>

33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
CSS选择器(返回列表)

soup.select("title")
# [<title>The Dormouse's story</title>]

(通过标签标签逐层查找)
soup.select("html head title")
# [<title>The Dormouse's story</title>]

(找到某个标签标签下的直接子标签)
soup.select("p > a")
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie"  id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup.select("p > #link1")
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]


44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444
(.contents 属性可以将tag的子节点以列表的方式输出,.contents 和 .children 属性仅包含tag的直接子节点)

soup=<head><title>The Dormouse's story</title></head>
title_tag=soup.head.contents
#[<title>The Dormouse's story</title>]
title_tag.contents
# [u'The Dormouse's story']

(通过tag的 .children 生成器,可以对tag的子节点进行循环)
for child in title_tag.children:
    print(child)
# The Dormouse's story


(.descendants 属性可以对所有tag的子孙节点进行递归循环)
for child in head_tag.descendants:
    print(child)
# <title>The Dormouse's story</title>
# The Dormouse's story

555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555

(通过 .parent 属性来获取某个元素的父节点)
title_tag = soup.title
title_tag
# <title>The Dormouse's story</title>
title_tag.parent
# <head><title>The Dormouse's story</title></head>

6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666

(使用 .next_sibling 和 .previous_sibling 属性来查询兄弟节点)
sibling_soup = BeautifulSoup("<a><b>text1</b><c>text2</c></a>")

sibling_soup.b.next_sibling(下一个兄弟节点)
# <c>text2</c>

sibling_soup.c.previous_sibling(上一个兄弟节点)
# <b>text1</b>

(通过 .next_siblings 和 .previous_siblings 属性可以对当前节点的兄弟节点迭代输出)
for sibling in soup.a.next_siblings:
    print(repr(sibling))
# u',\n'
# <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>
# u' and\n'
# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>
# u'; and they lived at the bottom of a well.'
# None

for sibling in soup.find(id="link3").previous_siblings:
    print(repr(sibling))
# ' and\n'
# <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>
# u',\n'
# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
# u'Once upon a time there were three little sisters; and their names were\n'
# None

7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777

格式化输出

soup = BeautifulSoup(markup)

print(soup.prettify())
# <html>
#  <head>
#  </head>
#  <body>
#   <a href="http://example.com/">
#    I linked to
#    <i>
#     example.com
#    </i>
#   </a>
#  </body>
# </html>

888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
soup.title
(拿取一个标签为title的节点)

soup.title.get_text()
(拿取title标签里的文本节点值)

soup.title.string
(拿取title标签里的文本节点值)

for string in soup.title.strings:
    print(repr(string))
    # u"The Dormouse's story"
    # u'\n\n'
    # u"The Dormouse's story"
(如果tag中包含多个字符串 ,可以使用 .strings 来循环获取)

for string in  soup.title.stripped_strings:
    print(repr(string))
    # u"The Dormouse's story"
    # u"The Dormouse's story"
(输出的字符串中可能包含了很多空格或空行,使用 .stripped_strings 可以去除多余空白内容)

soup.p['class']
(拿取p标签里的class属性值)

soup.body.b
(拿取body标签里的第一个b标签)

soup.p.attrs
# {u'class': u'boldest'}

soup.find('a').get('href')
(拿取p标签里的href属性值)