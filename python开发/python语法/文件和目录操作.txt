常用的文件操作
1. 判断路劲及文件
os.path.isabs(...) 　　　　 # 判断是否绝对路径
os.path.exists(...)　　　　 # 判断是否真实存在
os.path.isdir(...)　　　　   # 判断是否是个目录
os.path.isfile(...)　　　　   # 判断是否是个文件

2. 路径名、文件名分割
os.path.split(...)         　　 # 分隔目录和文件名/文件夹名
os.path.splitdrive(...)        # 分隔盘符(windows系统)
os.path.splitext(...)           # 分隔文件和扩展名

3. 工作目录及创建文件夹操作
os.getcwd()   # 获取当前工作目录
os.chdir(...)   # 改变工作目录
os.listdir(...)  # 以列表的形式获取指定目录下的文件夹和文件名称
os.mkdir(...)  # 创建单个目录    注意：创建多级用 os.makedirs()
os.makedirs(...)　　  # 创建多级目录

4. 删除文件夹、文件
os.rmdir(...) # 删除空文件夹  注意：必须为空文件夹  如需删除文件夹及其下所有文件，需用 shutil
os.remove(...)# 删除单一文件
shutil.rmtree(...)# 删除文件夹及其下所有文件

5. 重命名文件及文件夹
os.rename("D:\\test.txt","D:\\test1.txt")

6. 复制、移动文件夹/文件
shutil.copyfile("src","new") # 复制src文件目录下的文件到指定目录：（src文件目录和文件必须已存在，new的文件目录必须已存在，如有同名文件则覆盖）
shutil.copytree("src","new") # 复制src文件目录下的所有目录及文件到指点的目录：（src文件目录必须存在，new的文件目录必须不存在，该目录会由自动生成）
shutil.copy("src","new")     # 复制文件：复制src文件目录下的文件到指定目录（src文件目录和文件必须已存在，new的文件目录必须已存在，如有同名文件则覆盖）
shutil.move("src","new")     # 1：移动文件目录：移动src文件目录下的所有目录及文件到指点的目录：（src文件目录必须存在，new的文件目录可以不存在，该目录会由自动生成）
                             # 2：移动文件：复制src文件目录下的文件到指定目录下（src文件目录和文件必须已存在，new的文件目录可以不存在，如有同名文件则覆盖）


-------------------------------------------------------------------------------------------------------
os.access(path, mode)
检验权限模式

参数
path -- 要用来检测是否有访问权限的路径。
os.F_OK: 作为access()的mode参数，测试path是否存在。
os.R_OK: 包含在access()的mode参数中 ， 测试path是否可读。
os.W_OK 包含在access()的mode参数中 ， 测试path是否可写。
os.X_OK 包含在access()的mode参数中 ，测试path是否可执行。

返回值
如果允许访问返回 True , 否则返回False。

实例
import os, sys
# 假定 /tmp/foo.txt 文件存在，并有读写权限

ret = os.access("/tmp/foo.txt", os.F_OK)
print ("F_OK - 返回值 %s"% ret)
ret = os.access("/tmp/foo.txt", os.R_OK)
print ("R_OK - 返回值 %s"% ret)
ret = os.access("/tmp/foo.txt", os.W_OK)
print ("W_OK - 返回值 %s"% ret)
ret = os.access("/tmp/foo.txt", os.X_OK)
print ("X_OK - 返回值 %s"% ret)

-------------------------------------------------------------------------------------------------------

os.chdir(path)
改变当前工作目录

参数
path -- 要切换到的新路径。

返回值
如果允许访问返回 True , 否则返回False。

实例
以下实例演示了 chdir() 方法的使用：
#!/usr/bin/python3

import os, sys

# 查看当前工作目录
retval = os.getcwd()
print ("当前工作目录为 %s" % retval)
# 修改当前工作目录
os.chdir("/tmp")
# 查看修改后的工作目录
retval = os.getcwd()
print ("目录修改成功 %s" % retval)

-------------------------------------------------------------------------------------------------------

os.close(fd)
关闭文件描述符 fd

参数
fd -- 文件描述符。

返回值
该方法没有返回值。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
#  写入字符串
os.write(fd, "This is test")
# 关闭文件
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.closerange(fd_low, fd_high)
关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略

参数
fd_low -- 最小文件描述符
fd_high -- 最大文件描述符

返回值
该方法没有返回值。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 写入字符串
os.write(fd, "This is test")
# 关闭文件
os.closerange( fd, fd)

-------------------------------------------------------------------------------------------------------

os.dup(fd)
复制文件描述符 fd

参数
fd -- 文件描述符

返回值
返回复制的文件描述符。

import os, sys
 
# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 复制文件描述符
d_fd = os.dup( fd )
# 使用复制的文件描述符写入文件
os.write(d_fd, "This is test".encode())
# 关闭文件
os.closerange( fd, d_fd)

-------------------------------------------------------------------------------------------------------

os.dup2(fd, fd2)
将一个文件描述符 fd 复制到另一个 fd2

参数
fd -- 要被复制的文件描述符
fd2 -- 复制的文件描述符

返回值
没有返回值。

import os
 
# 打开一个文件
f=open('txt','a')
# 将这个文件描述符代表的文件，传递给 1 描述符指向的文件（也就是 stdout）
os.dup2(f.fileno(), 1)
# 关闭文件
f.close()


-------------------------------------------------------------------------------------------------------

os.fchdir(fd)
通过文件描述符改变当前工作目录

参数
fd -- 文件描述符

返回值
该方法没有返回值

import os, sys

# 首先到目录 "/var/www/html" 
os.chdir("/var/www/html" )
# 输出当前目录
print ("当前工作目录为 : %s" % os.getcwd())
# 打开新目录 "/tmp"
fd = os.open( "/tmp", os.O_RDONLY )
# 使用 os.fchdir() 方法修改到新目录
os.fchdir(fd)
# 输出当前目录
print ("当前工作目录为 : %s" % os.getcwd())
# 关闭打开的目录
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.fchmod(fd, mode)
改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。

参数
fd -- 文件描述符
mode -- 可以是以下一个或多个组成，多个使用 "|" 隔开：
stat.S_ISUID:设置 UID 位
stat.S_ISGID: 设置组 ID 位
stat.S_ENFMT: 系统文件锁定的执法行动
stat.S_ISVTX: 在执行之后保存文字和图片
stat.S_IREAD: 对于拥有者读的权限，Unix V7 版本中 stat.S_IRUSR 的代名词
stat.S_IWRITE: 对于拥有者写的权限，Unix V7 版本中 stat.S_IWUSR 的代名词
stat.S_IEXEC: 对于拥有者执行的权限，Unix V7 版本中 stat.S_IXUSR 的代名词
stat.S_IRWXU:对于拥有者读、写、执行的权限
stat.S_IRUSR: 对于拥有者读的权限
stat.S_IWUSR: 对于拥有者写的权限
stat.S_IXUSR: 对于拥有者执行的权限
stat.S_IRWXG: 对于同组的人读写执行的权限
stat.S_IRGRP: 对于同组读的权限
stat.S_IWGRP:对于同组写的权限
stat.S_IXGRP: 对于同组执行的权限
stat.S_IRWXO: 对于其他组读写执行的权限
stat.S_IROTH: 对于其他组读的权限
stat.S_IWOTH: 对于其他组写的权限
stat.S_IXOTH:对于其他组执行的权限

返回值
该方法没有返回值。

import os, sys, stat

# 打开文件 "/tmp/foo.txt"
fd = os.open( "/tmp", os.O_RDONLY )
# 设置文件可通过组执行
os.fchmod( fd, stat.S_IXGRP)
# 设置文件可被其他用户写入
os.fchmod(fd, stat.S_IWOTH)
print ("修改权限成功!!")
# 关闭文件
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.fdatasync(fd)
强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。

参数
fd -- 文件描述符

返回值
该方法没有返回值。

import os, sys

# 打开文件 "/tmp/foo.txt"
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 写入字符串
os.write(fd, "This is test")
# 使用 fdatasync() 方法
os.fdatasync(fd)
# 读取文件
os.lseek(fd, 0, 0)
str = os.read(fd, 100)
print ("读取的字符是 : ", str)
# 关闭文件
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.fdopen(fd[, mode[, bufsize]])
通过文件描述符 fd 创建一个文件对象，并返回这个文件对象

参数
fd -- 打开的文件的描述符，在Unix下，描述符是一个小整数。
mode -- 可选，和 Python 内建的 open 函数一样，mode参数可以指定『r,w,a,r+,w+,a+,b』等，表示文件的是只读的还是可以读写的，以及打开文件是以二进制还是文本形式打开。这些参数和C语言中的<stdio.h>中fopen函数中指定的mode参数类似。
bufsize -- 可选，指定返回的文件对象是否带缓冲：bufsize=0，表示没有带缓冲；bufsize=1，表示该文件对象是行缓冲的；bufsize=正数，表示使用一个指定大小的缓冲冲，单位为byte，但是这个大小不是精确的；bufsize=负数，表示使用一个系统默认大小的缓冲，对于tty字元设备一般是行缓冲，而对于其他文件则一般是全缓冲。如果这个参数没有制定，则使用系统默认的缓冲设定。

返回值
通过文件描述符返回的文件对象。

import os, sys
 
# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 获取以上文件的对象
fo = os.fdopen(fd, "w+")
# 获取当前文章
print ("Current I/O pointer position :%d" % fo.tell())
# 写入字符串
fo.write( "Python is a great language.\nYeah its great!!\n");
# 读取内容
os.lseek(fd, 0, 0)
str = os.read(fd, 100)
print ("Read String is : ", str)
# 获取当前位置
print ("Current I/O pointer position :%d" % fo.tell())
# 关闭文件
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.fstat(fd)
返回文件描述符fd的状态，像stat()。

参数
fd -- 文件的描述符。

返回值
返回文件描述符fd的状态。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 获取元组
info = os.fstat(fd)
print ("文件信息 :", info)
# 获取文件 uid
print ("文件 UID :%d" % info.st_uid)
# 获取文件 gid
print ("文件 GID  :%d" % info.st_gid)
# 关闭文件
os.close( fd)

-------------------------------------------------------------------------------------------------------


os.fsync(fd)
强制将文件描述符为fd的文件写入硬盘。

参数
fd -- 文件的描述符。

返回值
该方法没有返回值。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 写入字符串
os.write(fd, "This is test")
# 使用 fsync() 方法.
os.fsync(fd)
# 读取内容
os.lseek(fd, 0, 0)
str = os.read(fd, 100)
print ("读取的字符串为 : ", str)
# 关闭文件
os.close( fd)


-------------------------------------------------------------------------------------------------------

os.ftruncate(fd, length)
裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。

参数
fd -- 文件的描述符。
length -- 要裁剪文件大小。

返回值
该方法没有返回值。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 写入字符串
os.write(fd, "This is test - This is test")
# 使用 ftruncate() 方法
os.ftruncate(fd, 10)
# 读取内容
os.lseek(fd, 0, 0)
str = os.read(fd, 100)
print ("读取的字符串是 : ", str)
# 关闭文件
os.close( fd)

-------------------------------------------------------------------------------------------------------

os.getcwd()
返回当前工作目录

参数
无

返回值
返回当前进程的工作目录。

import os, sys

# 切换到 "/var/www/html" 目录
os.chdir("/var/www/html" )
# 打印当前目录
print ("当前工作目录 : %s" % os.getcwd())
# 打开 "/tmp"
fd = os.open( "/tmp", os.O_RDONLY )
# 使用 os.fchdir() 方法修改目录
os.fchdir(fd)
# 打印当前目录
print ("当前工作目录 : %s" % os.getcwd())
# 关闭文件
os.close( fd )

-------------------------------------------------------------------------------------------------------

os.getcwdu()
返回一个当前工作目录的Unicode对象

参数
无

返回值
返回一个当前工作目录的Unicode对象。

import os, sys

# 切换到 "/var/www/html" 目录
os.chdir("/var/www/html" )
# 打印当前目录
print ("当前工作目录 : %s" % os.getcwdu())
# 打开 "/tmp"
fd = os.open( "/tmp", os.O_RDONLY )
# 使用 os.fchdir() 方法修改目录
os.fchdir(fd)
# 打印当前目录
print ("当前工作目录 : %s" % os.getcwdu())
# 关闭文件
os.close( fd )

------------------------------------------------------------------------------------------------------

os.link(src, dst)
创建硬链接，名为参数 dst，指向参数 src

参数
src -- 用于创建硬连接的源地址
dst -- 用于创建硬连接的目标地址

返回值
该方法没有返回值。

import os, sys

# 打开文件
fd = os.open( "/var/www/html/foo.txt", os.O_RDWR|os.O_CREAT )
# 关闭文件
os.close( fd )
# 创建以上文件的拷贝
dst = "/tmp/foo.txt"
os.link( path, dst)

-------------------------------------------------------------------------------------------------------

os.listdir(path)
返回path指定的文件夹包含的文件或文件夹的名字的列表。

参数
path -- 需要列出的目录路径

返回值
返回指定路径下的文件和文件夹列表。

import os, sys

# 打开文件
dirs = os.listdir( "/var/www/html/" )
# 输出所有文件和文件夹
for file in dirs:
    print (file)

-------------------------------------------------------------------------------------------------------

os.lstat(path)
像stat(),但是没有软链接

参数
path -- 要返回信息的文件。

返回值
返回文件信息。

import os, sys

# 打开文件
fd = os.open( "/var/www/html/foo.txt", os.O_RDWR|os.O_CREAT )
# 关闭打开的文件
os.close( fd )
# 获取元组
info = os.lstat("/var/www/html/foo.txt")
print ("文件信息 :", info)
# 获取文件 uid
print ("文件 UID  :%d" % info.st_uid)
# 获取文件 gid
print ("文件 GID :%d" % info.st_gid)

-------------------------------------------------------------------------------------------------------


os.makedirs(path[, mode])
递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。

参数
path -- 需要递归创建的目录。
mode -- 权限模式。

返回值
该方法没有返回值。

import os, sys

os.makedirs( "/tmp/home/monthly/daily", 0o777 );

-------------------------------------------------------------------------------------------------------

os.mkdir(path[, mode])
以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。

参数
path -- 要创建的目录
mode -- 要为目录设置的权限数字模式

返回值
该方法没有返回值。

import os, sys

os.mkdir( "/tmp/home/monthly/daily/hourly", 0755 )

-------------------------------------------------------------------------------------------------------

os.open(file, flags[, mode])
打开一个文件，并且设置需要的打开选项，mode参数是可选的

参数
file -- 要打开的文件
flags -- 该参数可以是以下选项，多个使用 "|" 隔开：
os.O_RDONLY: 以只读的方式打开
os.O_WRONLY: 以只写的方式打开
os.O_RDWR : 以读写的方式打开
os.O_NONBLOCK: 打开时不阻塞
os.O_APPEND: 以追加的方式打开
os.O_CREAT: 创建并打开一个新文件
os.O_TRUNC: 打开一个文件并截断它的长度为零（必须有写权限）
os.O_EXCL: 如果指定的文件存在，返回错误
os.O_SHLOCK: 自动获取共享锁
os.O_EXLOCK: 自动获取独立锁
os.O_DIRECT: 消除或减少缓存效果
os.O_FSYNC : 同步写入
os.O_NOFOLLOW: 不追踪软链接
mode -- 类似 chmod()。

import os, sys

# 打开文件
fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )
# 写入字符串
os.write(fd, b"This is test")
# 关闭文件
os.close( fd )


-------------------------------------------------------------------------------------------------------


os.read(fd, n)
从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。

参数
fd -- 文件描述符。
n -- 读取的字节。

返回值
返回包含读取字节的字符串

import os, sys
# 打开文件
fd = os.open("f1.txt",os.O_RDWR)
# 读取文本
ret = os.read(fd,12)
print (ret)
# 关闭文件
os.close(fd)

-------------------------------------------------------------------------------------------------------

os.readlink(path)
返回软链接所指向的文件

参数
path -- 要查找的软链接路径

返回值
返回软链接所指向的文件

import os

src = '/usr/bin/python'
dst = '/tmp/python'
# 创建软链接
os.symlink(src, dst)
# 使用软链接显示源链接
path = os.readlink( dst )

-------------------------------------------------------------------------------------------------------

os.remove(path)
删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。

参数
path -- 要移除的文件路径

返回值
该方法没有返回值

import os, sys

# 列出目录
print ("目录为: %s" %os.listdir(os.getcwd()))

# 移除
os.remove("aa.txt")

# 移除后列出目录
print ("移除后 : %s" % os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.removedirs(path)
递归删除目录。

参数
path -- 要移除的目录路径

返回值
该方法没有返回值

import os, sys

# 列出目录
print ("目录为: %s" %os.listdir(os.getcwd()))

# 移除
os.removedirs("/test")

# 列出移除后的目录
print ("移除后目录为:" %os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.rename(src, dst)
重命名文件或目录，从 src 到 dst

参数
src -- 要修改的目录名
dst -- 修改后的目录名

返回值
该方法没有返回值

import os, sys

# 列出目录
print ("目录为: %s"%os.listdir(os.getcwd()))

# 重命名
os.rename("test.txt","test2.txt")

print ("重命名成功。")

# 列出重命名后的目录
print ("目录为: %s" %os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.renames(old, new)
递归地对目录进行更名，也可以对文件进行更名。

参数
old -- 要重命名的目录
new --文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树。

返回值
该方法没有返回值

import os, sys

print ("当前目录为: %s" %os.getcwd())
# 列出目录
print ("目录为: %s"%os.listdir(os.getcwd()))
# 重命名 "aa1.txt"
os.renames("aa1.txt","newdir/aanew.txt")
print ("重命名成功。")
# 列出重命名的文件 "aa1.txt"
print ("目录为: %s" %os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.rmdir(path)
删除path指定的空目录，如果目录非空，则抛出一个OSError异常。

参数
path -- 要删除的目录路径

返回值
该方法没有返回值

import os, sys

# 列出目录
print ("目录为: %s"%os.listdir(os.getcwd()))

# 删除路径
os.rmdir("mydir")

# 列出重命名后的目录
print ("目录为: %s" %os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.stat(path)
获取path指定的路径的信息，功能等同于C API中的stat()系统调用。

参数
path -- 指定路径

返回值
stat 结构:
st_mode: inode 保护模式
st_ino: inode 节点号。
st_dev: inode 驻留的设备。
st_nlink: inode 的链接数。
st_uid: 所有者的用户ID。
st_gid: 所有者的组ID。
st_size: 普通文件以字节为单位的大小；包含等待某些特殊文件的数据。
st_atime: 上次访问的时间。
st_mtime: 最后一次修改的时间。
st_ctime: 由操作系统报告的"ctime"。在某些系统上（如Unix）是最新的元数据更改的时间，在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。

import os, sys

# 显示文件 "a2.py" 信息
statinfo = os.stat('a2.py')


-------------------------------------------------------------------------------------------------------


os.symlink(src, dst)
创建一个软链接

参数
src -- 源地址。
dst -- 目标地址。

返回值
该方法没有返回值。

import os

src = '/usr/bin/python'
dst = '/tmp/python'

# 创建软链接
os.symlink(src, dst)


-------------------------------------------------------------------------------------------------------

os.unlink(path)
删除文件路径

参数
path -- 删除的文件路径

返回值
该方法没有返回值。

import os, sys

# 列出目录
print ("目录为: %s" %os.listdir(os.getcwd()))
os.unlink("aa.txt")
# 删除后的目录
print ("删除后的目录为 : %s" %os.listdir(os.getcwd()))

-------------------------------------------------------------------------------------------------------

os.utime(path, times)
返回指定的path文件的访问和修改的时间。

参数
path -- 文件路径
times -- 如果时间是 None, 则文件的访问和修改设为当前时间 。 否则, 时间是一个 2-tuple数字, (atime, mtime) 用来分别作为访问和修改的时间。

返回值
该方法没有返回值。

import os, sys

# 显示文件的 stat 信息
stinfo = os.stat('a2.py')
print (stinfo)

# 使用 os.stat 来接收文件的访问和修改时间
print ("a2.py 的访问时间: %s" %stinfo.st_atime)
print ("a2.py 的修改时间: %s" %stinfo.st_mtime)

# 修改访问和修改时间
os.utime("a2.py",(1330712280, 1330712292))

-------------------------------------------------------------------------------------------------------


os.write(fd, str)
写入字符串到文件描述符 fd中. 返回实际写入的字符串长度

参数
fd -- 文件描述符。
str -- 写入的字符串。

返回值
该方法返回写入的实际位数

import os, sys

# 打开文件
fd = os.open("f1.txt",os.O_RDWR|os.O_CREAT)

# 写入字符串
str = "This is runoob.com site"
ret = os.write(fd,bytes(str, 'UTF-8'))

# 输入返回值
print ("写入的位数为: ")
print (ret)

print ("写入成功")

# 关闭文件
os.close(fd)
