读写文件
open() 将会返回一个 file 对象，基本语法格式如下:
open(filename, mode)

filename：包含了你要访问的文件名称的字符串值。
mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。

r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。
r+	打开一个文件用于读写。文件指针将会放在文件的开头。
rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。




#读取该文件中的所有字节
f = open("/tmp/foo.txt", "r")
#进行读文件操作
str = f.read()
print(str)
f.close()

#读取指定字节数
f = open("/tmp/foo.txt", "r")
#进行读文件操作(读取6个字节)
str = f.read(6)
print(str)
f.close()

#f.readline() 会从文件中读取单独的一行
f = open("/tmp/foo.txt", "r")
#读取一行
str = f.readline()
print(str)
f.close()

#f.readlines() 将返回该文件中包含的所有行。
f = open("/tmp/foo.txt", "r")
str = f.readlines()
print(str)
f.close()


#f.write(string) 将 string 写入到文件中, 然后返回写入的字符数。
f = open("/tmp/foo.txt", "w")
num = f.write( "Python 是一个非常好的语言。\n是的，的确非常好!!\n" )
print(num)
f.close()

#如果要写入一些不是字符串的东西, 那么将需要先进行转换
f = open("/tmp/foo1.txt", "w")
value = ('www.runoob.com', 14)
s = str(value)
f.write(s)
f.close()

f.tell()
f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。

#如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。
#from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，例如：
#seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符
#seek(x,1) ： 表示从当前位置往后移动x个字符
#seek(-x,2)：表示从文件的结尾往前移动x个字符
#from_what 值为默认为0，即文件开头。
>>> f = open('/tmp/foo.txt', 'rb+')
>>> f.write(b'0123456789abcdef')
16
>>> f.seek(5)     # 移动到文件的第六个字节
5
>>> f.read(1)
b'5'
>>> f.seek(-3, 2) # 移动到文件的倒数第三字节
13
>>> f.read(1)
b'd'




文件对象的方法

file.close()
关闭文件。关闭后文件不能再进行读写操作。

file.flush()
刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。

file.fileno()
返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。

file.isatty()
如果文件连接到一个终端设备返回 True，否则返回 False。

file.next()
返回文件下一行。

file.read([size])
从文件读取指定的字节数，如果未给定或为负则读取所有。

file.readline([size])
读取整行，包括 "\n" 字符。
	
file.readlines([sizeint])
读取所有行并返回列表，若给定sizeint>0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。
	
file.seek(offset[, whence])
设置文件当前位置

file.tell()
返回文件当前位置。

file.truncate([size])
从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。

file.write(str)
将字符串写入文件，返回的是写入的字符长度。

file.writelines(sequence)
向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。





# 使用pickle模块将数据对象保存到文件
import pickle

data1 = {'a': [1, 2.0, 3, 4+6j],'b': ('string', u'Unicode string'),'c': None}
data2 = [1, 2, 3]
output = open('/p.txt', 'wb')
pickle.dump(data1, output)
pickle.dump(data2, output, -1)
output.close()



#使用pickle模块从文件中重构python对象
import pprint, pickle

file = open('/p.txt', 'rb')
data1 = pickle.load(file)
pprint.pprint(data1)
data2 = pickle.load(file)
pprint.pprint(data2)
file.close()